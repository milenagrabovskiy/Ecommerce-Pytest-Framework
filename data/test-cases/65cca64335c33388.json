{"uid":"65cca64335c33388","name":"test_end_to_end_checkout[guest_user]","fullName":"tests.frontend.end_to_end.test_end_to_end_checkout_guest_user.TestEndToEndCheckout#test_end_to_end_checkout","historyId":"b45fe9f02b2a74cd2a6b6b16f5b21ccc","time":{"start":1760858442642,"stop":1760858459495,"duration":16853},"description":"Validate end-to-end checkout for guest and registered users.\n\nThis test relies on the `setup_fixture` class-scoped fixture, which initializes\nall required page objects.\n\nArgs:\n    user_type (str): The type of user to test with. Can be:\n        * \"guest_user\" – goes through checkout without creating an account.\n        * \"registered_user\" – registers a new account and verifies order history.\n\nAsserts:\n    * A product can be successfully added to the cart.\n    * The coupon is applied and the order total is updated.\n    * An order number is generated upon successful checkout.\n    * For registered users, the order number appears in account history.\n","descriptionHtml":"<p>Validate end-to-end checkout for guest and registered users.</p>\n<p>This test relies on the <code>setup_fixture</code> class-scoped fixture, which initializes<br />\nall required page objects.</p>\n<p>Args:<br />\nuser_type (str): The type of user to test with. Can be:<br />\n* &quot;guest_user&quot; – goes through checkout without creating an account.<br />\n* &quot;registered_user&quot; – registers a new account and verifies order history.</p>\n<p>Asserts:<br />\n* A product can be successfully added to the cart.<br />\n* The coupon is applied and the order total is updated.<br />\n* An order number is generated upon successful checkout.<br />\n* For registered users, the order number appears in account history.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element with locator = ('css selector', 'header h1.entry-title'), does not contain text: \"Order received\", after waiting 5 seconds.","statusTrace":"self = <end_to_end.test_end_to_end_checkout_guest_user.TestEndToEndCheckout object at 0x7f7eff90a210>\nuser_type = 'guest_user'\n\n    @pytest.mark.tcid33\n    @pytest.mark.pioneertcid3\n    def test_end_to_end_checkout(self, user_type):\n        \"\"\"Validate end-to-end checkout for guest and registered users.\n    \n        This test relies on the `setup_fixture` class-scoped fixture, which initializes\n        all required page objects.\n    \n        Args:\n            user_type (str): The type of user to test with. Can be:\n                * \"guest_user\" – goes through checkout without creating an account.\n                * \"registered_user\" – registers a new account and verifies order history.\n    \n        Asserts:\n            * A product can be successfully added to the cart.\n            * The coupon is applied and the order total is updated.\n            * An order number is generated upon successful checkout.\n            * For registered users, the order number appears in account history.\n        \"\"\"\n        if user_type == 'registered_user': # create a registered user\n            self.my_acc_so.go_to_my_account()\n            self.registered_email = generate_random_email_and_password()['email']\n            self.my_acc_so.input_register_email(self.registered_email)\n            self.my_acc_so.input_register_password(generate_random_email_and_password()['password'])\n            self.my_acc_so.click_register_button()\n    \n        # go to home page\n        self.home_page.go_to_home_page()\n    \n        # add item to cart\n        self.home_page.click_first_add_to_cart_button()\n    \n        # make sure the cart is updated before going to cart\n        self.header.wait_until_cart_item_count(1)\n    \n        # go to cart\n        self.header.click_on_cart_on_right_header()\n    \n        # verify there are items in the cart\n        product_names = self.cart_page.get_all_product_names_in_cart()\n        assert len(product_names) == 1, f\"Expected 1 product in cart but found {len(product_names)}\"\n    \n        #  apply coupon\n        self.cart_page.click_apply_coupon_arrow()\n        coupon_code = MainConfigs.get_coupon_code('FREE_COUPON')\n        self.cart_page.apply_coupon(coupon_code)\n        self.cart_page.verify_order_total_is_0()\n    \n        # proceed to checkout\n        self.cart_page.click_on_proceed_to_checkout()\n    \n        # fill in checkout form\n        if user_type == 'registered_user':\n            self.checkout_page.fill_in_billing_info()\n        else:\n            self.checkout_page.fill_in_billing_info()\n    \n        # submit\n        self.checkout_page.click_place_order()\n        self.checkout_page.click_place_order()\n    \n        # verify order is placed\n>       self.order_received.verify_order_received_page_loaded()\n\ntests/frontend/end_to_end/test_end_to_end_checkout_guest_user.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/OrderReceivedPage.py:12: in verify_order_received_page_loaded\n    self.sl.wait_until_element_contains_text(self.PAGE_MAIN_HEADER, \"Order received\")\nsrc/selenium_extended/SeleniumExtended.py:87: in wait_until_element_contains_text\n    WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"69b760d3d55e5d1fc7f1b54f88db9e3a\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x7f7eff844a40>\nmessage = 'Element with locator = (\\'css selector\\', \\'header h1.entry-title\\'), does not contain text: \"Order received\", after waiting 5 seconds.'\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Element with locator = ('css selector', 'header h1.entry-title'), does not contain text: \"Order received\", after waiting 5 seconds.\n\n/opt/hostedtoolcache/Python/3.13.8/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1760858442353,"stop":1760858442641,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_fixture","time":{"start":1760858442641,"stop":1760858442642,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"init_driver","time":{"start":1760858473841,"stop":1760858474136,"duration":295},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Validate end-to-end checkout for guest and registered users.\n\nThis test relies on the `setup_fixture` class-scoped fixture, which initializes\nall required page objects.\n\nArgs:\n    user_type (str): The type of user to test with. Can be:\n        * \"guest_user\" – goes through checkout without creating an account.\n        * \"registered_user\" – registers a new account and verifies order history.\n\nAsserts:\n    * A product can be successfully added to the cart.\n    * The coupon is applied and the order total is updated.\n    * An order number is generated upon successful checkout.\n    * For registered users, the order number appears in account history.\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element with locator = ('css selector', 'header h1.entry-title'), does not contain text: \"Order received\", after waiting 5 seconds.","statusTrace":"self = <end_to_end.test_end_to_end_checkout_guest_user.TestEndToEndCheckout object at 0x7f7eff90a210>\nuser_type = 'guest_user'\n\n    @pytest.mark.tcid33\n    @pytest.mark.pioneertcid3\n    def test_end_to_end_checkout(self, user_type):\n        \"\"\"Validate end-to-end checkout for guest and registered users.\n    \n        This test relies on the `setup_fixture` class-scoped fixture, which initializes\n        all required page objects.\n    \n        Args:\n            user_type (str): The type of user to test with. Can be:\n                * \"guest_user\" – goes through checkout without creating an account.\n                * \"registered_user\" – registers a new account and verifies order history.\n    \n        Asserts:\n            * A product can be successfully added to the cart.\n            * The coupon is applied and the order total is updated.\n            * An order number is generated upon successful checkout.\n            * For registered users, the order number appears in account history.\n        \"\"\"\n        if user_type == 'registered_user': # create a registered user\n            self.my_acc_so.go_to_my_account()\n            self.registered_email = generate_random_email_and_password()['email']\n            self.my_acc_so.input_register_email(self.registered_email)\n            self.my_acc_so.input_register_password(generate_random_email_and_password()['password'])\n            self.my_acc_so.click_register_button()\n    \n        # go to home page\n        self.home_page.go_to_home_page()\n    \n        # add item to cart\n        self.home_page.click_first_add_to_cart_button()\n    \n        # make sure the cart is updated before going to cart\n        self.header.wait_until_cart_item_count(1)\n    \n        # go to cart\n        self.header.click_on_cart_on_right_header()\n    \n        # verify there are items in the cart\n        product_names = self.cart_page.get_all_product_names_in_cart()\n        assert len(product_names) == 1, f\"Expected 1 product in cart but found {len(product_names)}\"\n    \n        #  apply coupon\n        self.cart_page.click_apply_coupon_arrow()\n        coupon_code = MainConfigs.get_coupon_code('FREE_COUPON')\n        self.cart_page.apply_coupon(coupon_code)\n        self.cart_page.verify_order_total_is_0()\n    \n        # proceed to checkout\n        self.cart_page.click_on_proceed_to_checkout()\n    \n        # fill in checkout form\n        if user_type == 'registered_user':\n            self.checkout_page.fill_in_billing_info()\n        else:\n            self.checkout_page.fill_in_billing_info()\n    \n        # submit\n        self.checkout_page.click_place_order()\n        self.checkout_page.click_place_order()\n    \n        # verify order is placed\n>       self.order_received.verify_order_received_page_loaded()\n\ntests/frontend/end_to_end/test_end_to_end_checkout_guest_user.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/OrderReceivedPage.py:12: in verify_order_received_page_loaded\n    self.sl.wait_until_element_contains_text(self.PAGE_MAIN_HEADER, \"Order received\")\nsrc/selenium_extended/SeleniumExtended.py:87: in wait_until_element_contains_text\n    WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"69b760d3d55e5d1fc7f1b54f88db9e3a\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x7f7eff844a40>\nmessage = 'Element with locator = (\\'css selector\\', \\'header h1.entry-title\\'), does not contain text: \"Order received\", after waiting 5 seconds.'\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Element with locator = ('css selector', 'header h1.entry-title'), does not contain text: \"Order received\", after waiting 5 seconds.\n\n/opt/hostedtoolcache/Python/3.13.8/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[],"attachments":[{"uid":"f7f63cff1f0e69","name":"log","source":"f7f63cff1f0e69.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"init_driver::0","time":{"start":1760858473761,"stop":1760858473839,"duration":78},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"init_driver::0","time":{"start":1760858475509,"stop":1760858475577,"duration":68},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"pioneertcid3"},{"name":"tag","value":"tcid33"},{"name":"tag","value":"efe123"},{"name":"tag","value":"fesmoke"},{"name":"tag","value":"smoke"},{"name":"tag","value":"feregression"},{"name":"tag","value":"end_to_end"},{"name":"parentSuite","value":"tests.frontend.end_to_end"},{"name":"suite","value":"test_end_to_end_checkout_guest_user"},{"name":"subSuite","value":"TestEndToEndCheckout"},{"name":"host","value":"runnervmzdgdc"},{"name":"thread","value":"2685-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.frontend.end_to_end.test_end_to_end_checkout_guest_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user_type","value":"'guest_user'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["pioneertcid3","smoke","feregression","end_to_end","efe123","tcid33","fesmoke"]},"source":"65cca64335c33388.json","parameterValues":["'guest_user'"]}