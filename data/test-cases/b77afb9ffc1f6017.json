{"uid":"b77afb9ffc1f6017","name":"test_price_boundaries[very small sale price]","fullName":"tests.backend.products.test_create_products_regression#test_price_boundaries","historyId":"cf7e9f7401764708580c0aec9e2e1f19","time":{"start":1758093775661,"stop":1758093776581,"duration":920},"description":"Test creating a product with valid sale_price within acceptable boundaries.\n\nThis test verifies that when a product is created with a sale_price that is\nless than the regular_price, the API stores the correct values for both\nregular_price and sale_price, and the product is properly recorded in the DB.\n\nArgs:\n    setup_teardown (fixture): Fixture providing API and database helpers.\n    regular_price (str): Regular price to use when creating the product.\n    sale_price (str): Sale price to use when creating the product.\n\nRaises:\n    AssertionError: If the API or database does not store prices correctly.\n","descriptionHtml":"<p>Test creating a product with valid sale_price within acceptable boundaries.</p>\n<p>This test verifies that when a product is created with a sale_price that is<br />\nless than the regular_price, the API stores the correct values for both<br />\nregular_price and sale_price, and the product is properly recorded in the DB.</p>\n<p>Args:<br />\nsetup_teardown (fixture): Fixture providing API and database helpers.<br />\nregular_price (str): Regular price to use when creating the product.<br />\nsale_price (str): Sale price to use when creating the product.</p>\n<p>Raises:<br />\nAssertionError: If the API or database does not store prices correctly.</p>\n","status":"broken","statusMessage":"RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7fba40500c30>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7fba4059b680>}\nregular_price = '10.00', sale_price = '0.00000001'\n\n    @pytest.mark.sale_price_edge\n    @pytest.mark.parametrize(\n        \"regular_price, sale_price\",\n        [\n            pytest.param(\"10.00\", \"9.99\", marks=[pytest.mark.ebe33], id=\"sale price one cent off of regular\"),\n            pytest.param(\"9999999.99\", \"9999999.90\", marks=[pytest.mark.ebe34], id=\"very large price and sale price\"),\n            pytest.param(\"10.00\", \"0.01\", marks=[pytest.mark.ebe35], id=\"sale price=0.01\"),\n            pytest.param(\"10.00\", \"0.00000001\", marks=[pytest.mark.ebe36], id=\"very small sale price\"),\n        ]\n    )\n    \n    def test_price_boundaries(setup_teardown, regular_price, sale_price):\n        \"\"\"Test creating a product with valid sale_price within acceptable boundaries.\n    \n        This test verifies that when a product is created with a sale_price that is\n        less than the regular_price, the API stores the correct values for both\n        regular_price and sale_price, and the product is properly recorded in the DB.\n    \n        Args:\n            setup_teardown (fixture): Fixture providing API and database helpers.\n            regular_price (str): Regular price to use when creating the product.\n            sale_price (str): Sale price to use when creating the product.\n    \n        Raises:\n            AssertionError: If the API or database does not store prices correctly.\n        \"\"\"\n        # create payload with sale_price and regular_price\n        payload = {\n            \"regular_price\" : regular_price,\n            \"sale_price\": sale_price\n        }\n    \n        # create product with payload\n        post_response = setup_teardown['products_api_helper'].call_create_product(payload)\n        product_id = post_response['id']\n        setup_teardown['product_ids'].append(product_id)\n        logger.info(f\"POST response for sale_price > regular_price create product test: {post_response}\")\n    \n        # make GET call to make sure product in db and api.\n>       get_response = setup_teardown['generic_products_helper'].verify_product_is_created(post_response)\n\ntests/backend/products/test_create_products_regression.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_products_helper.py:151: in verify_product_is_created\n    db_product = self.products_dao.get_product_by_id(product_id)\nsrc/dao/products_dao.py:60: in get_product_by_id\n    return self.db_helper.execute_select(sql)\nsrc/utilities/dbUtility.py:31: in execute_select\n    conn = self.create_connection()\nsrc/utilities/dbUtility.py:23: in create_connection\n    connection = pymysql.connect(host=self.host, user=self.creds['db_user'],\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:361: in __init__\n    self.connect()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:669: in connect\n    self._request_authentication()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:979: in _request_authentication\n    auth_packet = _auth.caching_sha2_password_auth(self, auth_packet)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:267: in caching_sha2_password_auth\n    data = sha2_rsa_encrypt(conn.password, conn.salt, conn.server_public_key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npassword = b'SpecialStudentsSecret'\nsalt = b\"'Z \\x0e\\x1a\\x1c\\x1f\\x0c}z<J@E}xtnq\\x17\"\npublic_key = b'-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmE7rN2b1SK+cHlbBJuhy\\n7WnyqChNyu7BrMutBWtlMO...EozxYH9BW+KJ23\\nvx4a0Hrs6Ui6XNKiYmsK9l/PwEwYt3phoWR0RAh27OM12+mxaNwalSUs0uosqNFr\\nNwIDAQAB\\n-----END PUBLIC KEY-----\\n'\n\n    def sha2_rsa_encrypt(password, salt, public_key):\n        \"\"\"Encrypt password with salt and public_key.\n    \n        Used for sha256_password and caching_sha2_password.\n        \"\"\"\n        if not _have_cryptography:\n>           raise RuntimeError(\n                \"'cryptography' package is required for sha256_password or\"\n                + \" caching_sha2_password auth methods\"\n            )\nE           RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:144: RuntimeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_teardown","time":{"start":1758093767746,"stop":1758093767746,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test creating a product with valid sale_price within acceptable boundaries.\n\nThis test verifies that when a product is created with a sale_price that is\nless than the regular_price, the API stores the correct values for both\nregular_price and sale_price, and the product is properly recorded in the DB.\n\nArgs:\n    setup_teardown (fixture): Fixture providing API and database helpers.\n    regular_price (str): Regular price to use when creating the product.\n    sale_price (str): Sale price to use when creating the product.\n\nRaises:\n    AssertionError: If the API or database does not store prices correctly.\n","status":"broken","statusMessage":"RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7fba40500c30>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7fba4059b680>}\nregular_price = '10.00', sale_price = '0.00000001'\n\n    @pytest.mark.sale_price_edge\n    @pytest.mark.parametrize(\n        \"regular_price, sale_price\",\n        [\n            pytest.param(\"10.00\", \"9.99\", marks=[pytest.mark.ebe33], id=\"sale price one cent off of regular\"),\n            pytest.param(\"9999999.99\", \"9999999.90\", marks=[pytest.mark.ebe34], id=\"very large price and sale price\"),\n            pytest.param(\"10.00\", \"0.01\", marks=[pytest.mark.ebe35], id=\"sale price=0.01\"),\n            pytest.param(\"10.00\", \"0.00000001\", marks=[pytest.mark.ebe36], id=\"very small sale price\"),\n        ]\n    )\n    \n    def test_price_boundaries(setup_teardown, regular_price, sale_price):\n        \"\"\"Test creating a product with valid sale_price within acceptable boundaries.\n    \n        This test verifies that when a product is created with a sale_price that is\n        less than the regular_price, the API stores the correct values for both\n        regular_price and sale_price, and the product is properly recorded in the DB.\n    \n        Args:\n            setup_teardown (fixture): Fixture providing API and database helpers.\n            regular_price (str): Regular price to use when creating the product.\n            sale_price (str): Sale price to use when creating the product.\n    \n        Raises:\n            AssertionError: If the API or database does not store prices correctly.\n        \"\"\"\n        # create payload with sale_price and regular_price\n        payload = {\n            \"regular_price\" : regular_price,\n            \"sale_price\": sale_price\n        }\n    \n        # create product with payload\n        post_response = setup_teardown['products_api_helper'].call_create_product(payload)\n        product_id = post_response['id']\n        setup_teardown['product_ids'].append(product_id)\n        logger.info(f\"POST response for sale_price > regular_price create product test: {post_response}\")\n    \n        # make GET call to make sure product in db and api.\n>       get_response = setup_teardown['generic_products_helper'].verify_product_is_created(post_response)\n\ntests/backend/products/test_create_products_regression.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_products_helper.py:151: in verify_product_is_created\n    db_product = self.products_dao.get_product_by_id(product_id)\nsrc/dao/products_dao.py:60: in get_product_by_id\n    return self.db_helper.execute_select(sql)\nsrc/utilities/dbUtility.py:31: in execute_select\n    conn = self.create_connection()\nsrc/utilities/dbUtility.py:23: in create_connection\n    connection = pymysql.connect(host=self.host, user=self.creds['db_user'],\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:361: in __init__\n    self.connect()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:669: in connect\n    self._request_authentication()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:979: in _request_authentication\n    auth_packet = _auth.caching_sha2_password_auth(self, auth_packet)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:267: in caching_sha2_password_auth\n    data = sha2_rsa_encrypt(conn.password, conn.salt, conn.server_public_key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npassword = b'SpecialStudentsSecret'\nsalt = b\"'Z \\x0e\\x1a\\x1c\\x1f\\x0c}z<J@E}xtnq\\x17\"\npublic_key = b'-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmE7rN2b1SK+cHlbBJuhy\\n7WnyqChNyu7BrMutBWtlMO...EozxYH9BW+KJ23\\nvx4a0Hrs6Ui6XNKiYmsK9l/PwEwYt3phoWR0RAh27OM12+mxaNwalSUs0uosqNFr\\nNwIDAQAB\\n-----END PUBLIC KEY-----\\n'\n\n    def sha2_rsa_encrypt(password, salt, public_key):\n        \"\"\"Encrypt password with salt and public_key.\n    \n        Used for sha256_password and caching_sha2_password.\n        \"\"\"\n        if not _have_cryptography:\n>           raise RuntimeError(\n                \"'cryptography' package is required for sha256_password or\"\n                + \" caching_sha2_password auth methods\"\n            )\nE           RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:144: RuntimeError","steps":[],"attachments":[{"uid":"1395b546db1cb511","name":"log","source":"1395b546db1cb511.txt","type":"text/plain","size":2965}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup_teardown::0","time":{"start":1758093776623,"stop":1758093780130,"duration":3507},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"sale_price_edge"},{"name":"tag","value":"ebe36"},{"name":"tag","value":"products"},{"name":"tag","value":"create_product"},{"name":"parentSuite","value":"tests.backend.products"},{"name":"suite","value":"test_create_products_regression"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2082-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.products.test_create_products_regression"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"regular_price","value":"'10.00'"},{"name":"sale_price","value":"'0.00000001'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["sale_price_edge","ebe36","create_product","products"]},"source":"b77afb9ffc1f6017.json","parameterValues":["'10.00'","'0.00000001'"]}