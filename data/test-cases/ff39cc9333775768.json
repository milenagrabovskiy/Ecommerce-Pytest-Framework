{"uid":"ff39cc9333775768","name":"test_search_up_product[search for variable product]","fullName":"tests.frontend.home_page.test_search_products.TestSearchProduct#test_search_up_product","historyId":"8bf229398713e4698229bfad59bcd834","time":{"start":1758751517989,"stop":1758751518381,"duration":392},"description":"Verifies product search results by product type.\n\nArgs:\n    setup: Test fixture to initialize page objects.\n    product_type (str): Type of product to search ('simple', 'variable', 'invalid').\n\nAssertions:\n    - Simple product: Navigates to PDP and matches product name.\n    - Variable product: Product is listed on the home page.\n    - Invalid product: Displays 'no products found' message.\n","descriptionHtml":"<p>Verifies product search results by product type.</p>\n<p>Args:<br />\nsetup: Test fixture to initialize page objects.<br />\nproduct_type (str): Type of product to search ('simple', 'variable', 'invalid').</p>\n<p>Assertions:<br />\n- Simple product: Navigates to PDP and matches product name.<br />\n- Variable product: Product is listed on the home page.<br />\n- Invalid product: Displays 'no products found' message.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: The element with the reference 629be579-679a-4e0c-acfe-df3b8e0a3450 is stale; either its node document is not the active document, or it is no longer connected to the DOM; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nStaleElementReferenceError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:796:5\ngetKnownElement@chrome://remote/content/marionette/json.sys.mjs:405:11\ndeserializeJSON@chrome://remote/content/marionette/json.sys.mjs:263:20\ncloneObject@chrome://remote/content/marionette/json.sys.mjs:59:24\ndeserializeJSON@chrome://remote/content/marionette/json.sys.mjs:293:16\njson.deserialize@chrome://remote/content/marionette/json.sys.mjs:297:10\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:179:30","statusTrace":"self = <test_search_products.TestSearchProduct object at 0x7f659e34ec10>\nsetup = None, product_type = 'variable'\n\n    @pytest.mark.efe123\n    def test_search_up_product(self, setup, product_type):\n        \"\"\"Verifies product search results by product type.\n    \n        Args:\n            setup: Test fixture to initialize page objects.\n            product_type (str): Type of product to search ('simple', 'variable', 'invalid').\n    \n        Assertions:\n            - Simple product: Navigates to PDP and matches product name.\n            - Variable product: Product is listed on the home page.\n            - Invalid product: Displays 'no products found' message.\n        \"\"\"\n        product_name = self.config.get_product_name_by_type(product_type)\n        self.home_page.go_to_home_page()\n        self.home_page.search_for_product_by_name(product_name)\n    \n        if product_type == 'simple':\n            pdp_product = self.pdp.get_displayed_product_name()\n            assert pdp_product == product_name, (f\"Search for product by name loaded wrong product.\"\n                                                 f\"Expected product: {product_name}, Actual: {pdp_product}\")\n    \n        elif product_type == 'variable':\n>           all_product_names = self.home_page.get_all_product_names()\n\ntests/frontend/home_page/test_search_products.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/HomePage.py:41: in get_all_product_names\n    return [product.text for product in products]\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:109: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f659e3f9250>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"The element with the reference 629be5...ys.mjs:297:10\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:179:30\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: The element with the reference 629be579-679a-4e0c-acfe-df3b8e0a3450 is stale; either its node document is not the active document, or it is no longer connected to the DOM; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       StaleElementReferenceError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:796:5\nE       getKnownElement@chrome://remote/content/marionette/json.sys.mjs:405:11\nE       deserializeJSON@chrome://remote/content/marionette/json.sys.mjs:263:20\nE       cloneObject@chrome://remote/content/marionette/json.sys.mjs:59:24\nE       deserializeJSON@chrome://remote/content/marionette/json.sys.mjs:293:16\nE       json.deserialize@chrome://remote/content/marionette/json.sys.mjs:297:10\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:179:30\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"init_driver","time":{"start":1758751515131,"stop":1758751516592,"duration":1461},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1758751516592,"stop":1758751517021,"duration":429},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"init_driver::0","time":{"start":1758751519199,"stop":1758751519825,"duration":626},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"efe123"},{"name":"tag","value":"efe40"},{"name":"tag","value":"feregression"},{"name":"tag","value":"home_page"},{"name":"parentSuite","value":"tests.frontend.home_page"},{"name":"suite","value":"test_search_products"},{"name":"subSuite","value":"TestSearchProduct"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2642-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.frontend.home_page.test_search_products"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"product_type","value":"'variable'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"e3bc918891c407f5","status":"passed","time":{"start":1758751505562,"stop":1758751506090,"duration":528}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["home_page","feregression","efe123","efe40"]},"source":"ff39cc9333775768.json","parameterValues":["'variable'"]}