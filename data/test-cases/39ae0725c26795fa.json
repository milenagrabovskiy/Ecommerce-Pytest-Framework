{"uid":"39ae0725c26795fa","name":"test_invalid_sales_price[very large sale_price > regular_price]","fullName":"tests.backend.products.test_create_products_regression#test_invalid_sales_price","historyId":"f1da9dd0ce3ec8268d565eb93bba17d4","time":{"start":1757921064574,"stop":1757921065226,"duration":652},"description":"Test that creating a product with sale_price greater than or equal to regular_price\nresults in the API ignoring the sale_price and setting it to an empty string.\n\nArgs:\n    setup_teardown (fixture): Fixture providing API helpers.\n    regular_price (str): Regular price of the product.\n    sale_price (str): Sale price of the product.\n\nRaises:\n    AssertionError: If the API or DB does not handle invalid sale_price correctly.\n","descriptionHtml":"<p>Test that creating a product with sale_price greater than or equal to regular_price<br />\nresults in the API ignoring the sale_price and setting it to an empty string.</p>\n<p>Args:<br />\nsetup_teardown (fixture): Fixture providing API helpers.<br />\nregular_price (str): Regular price of the product.<br />\nsale_price (str): Sale price of the product.</p>\n<p>Raises:<br />\nAssertionError: If the API or DB does not handle invalid sale_price correctly.</p>\n","status":"broken","statusMessage":"RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7fb23309e190>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7fb23310b680>}\nregular_price = '0.00', sale_price = '9999999.99'\n\n    @pytest.mark.invalid_sale_price\n    @pytest.mark.parametrize(\n        \"regular_price, sale_price\",\n        [\n            pytest.param(\"5.00\", \"10.00\", marks=[pytest.mark.ebe28], id=\"sale_price > regular_price\"),\n            pytest.param(\"10.00\", \"10.00\", marks=[pytest.mark.ebe29], id=\"sale_price == regular_price\"),\n            pytest.param(\"9999999.99\", \"9999999.99\", marks=[pytest.mark.ebe30], id=\"very large sale_price == regular_price\"),\n            pytest.param(\"0.00\", \"9999999.99\", marks=[pytest.mark.ebe31], id=\"very large sale_price > regular_price\"),\n            pytest.param(\"10.00\", \"abc\", marks=[pytest.mark.ebe32], id=\"letter string sale_price\"),\n        ]\n    )\n    \n    \n    def test_invalid_sales_price(setup_teardown, regular_price, sale_price):\n        \"\"\"Test that creating a product with sale_price greater than or equal to regular_price\n        results in the API ignoring the sale_price and setting it to an empty string.\n    \n        Args:\n            setup_teardown (fixture): Fixture providing API helpers.\n            regular_price (str): Regular price of the product.\n            sale_price (str): Sale price of the product.\n    \n        Raises:\n            AssertionError: If the API or DB does not handle invalid sale_price correctly.\n        \"\"\"\n        # create payload with sale_price and regular_price\n        payload = {\n            \"regular_price\" : regular_price,\n            \"sale_price\": sale_price\n        }\n    \n        # create product with payload\n        post_response = setup_teardown['products_api_helper'].call_create_product(payload)\n        product_id = post_response['id']\n        setup_teardown['product_ids'].append(product_id)\n        logger.info(f\"POST response for sale_price > regular_price create product test: {post_response}\")\n    \n        # make GET call to make sure api ignores sale_price and sets it to an empty string.\n>       get_response = setup_teardown['generic_products_helper'].verify_product_is_created(post_response)\n\ntests/backend/products/test_create_products_regression.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_products_helper.py:151: in verify_product_is_created\n    db_product = self.products_dao.get_product_by_id(product_id)\nsrc/dao/products_dao.py:60: in get_product_by_id\n    return self.db_helper.execute_select(sql)\nsrc/utilities/dbUtility.py:31: in execute_select\n    conn = self.create_connection()\nsrc/utilities/dbUtility.py:23: in create_connection\n    connection = pymysql.connect(host=self.host, user=self.creds['db_user'],\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:361: in __init__\n    self.connect()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:669: in connect\n    self._request_authentication()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:979: in _request_authentication\n    auth_packet = _auth.caching_sha2_password_auth(self, auth_packet)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:267: in caching_sha2_password_auth\n    data = sha2_rsa_encrypt(conn.password, conn.salt, conn.server_public_key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npassword = b'SpecialStudentsSecret'\nsalt = b\"?y\\x15Y\\x15bPsb\\x0e\\x11yg\\x07Y\\x1a'2/D\"\npublic_key = b'-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmE7rN2b1SK+cHlbBJuhy\\n7WnyqChNyu7BrMutBWtlMO...EozxYH9BW+KJ23\\nvx4a0Hrs6Ui6XNKiYmsK9l/PwEwYt3phoWR0RAh27OM12+mxaNwalSUs0uosqNFr\\nNwIDAQAB\\n-----END PUBLIC KEY-----\\n'\n\n    def sha2_rsa_encrypt(password, salt, public_key):\n        \"\"\"Encrypt password with salt and public_key.\n    \n        Used for sha256_password and caching_sha2_password.\n        \"\"\"\n        if not _have_cryptography:\n>           raise RuntimeError(\n                \"'cryptography' package is required for sha256_password or\"\n                + \" caching_sha2_password auth methods\"\n            )\nE           RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:144: RuntimeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_teardown","time":{"start":1757921062413,"stop":1757921062413,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test that creating a product with sale_price greater than or equal to regular_price\nresults in the API ignoring the sale_price and setting it to an empty string.\n\nArgs:\n    setup_teardown (fixture): Fixture providing API helpers.\n    regular_price (str): Regular price of the product.\n    sale_price (str): Sale price of the product.\n\nRaises:\n    AssertionError: If the API or DB does not handle invalid sale_price correctly.\n","status":"broken","statusMessage":"RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7fb23309e190>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7fb23310b680>}\nregular_price = '0.00', sale_price = '9999999.99'\n\n    @pytest.mark.invalid_sale_price\n    @pytest.mark.parametrize(\n        \"regular_price, sale_price\",\n        [\n            pytest.param(\"5.00\", \"10.00\", marks=[pytest.mark.ebe28], id=\"sale_price > regular_price\"),\n            pytest.param(\"10.00\", \"10.00\", marks=[pytest.mark.ebe29], id=\"sale_price == regular_price\"),\n            pytest.param(\"9999999.99\", \"9999999.99\", marks=[pytest.mark.ebe30], id=\"very large sale_price == regular_price\"),\n            pytest.param(\"0.00\", \"9999999.99\", marks=[pytest.mark.ebe31], id=\"very large sale_price > regular_price\"),\n            pytest.param(\"10.00\", \"abc\", marks=[pytest.mark.ebe32], id=\"letter string sale_price\"),\n        ]\n    )\n    \n    \n    def test_invalid_sales_price(setup_teardown, regular_price, sale_price):\n        \"\"\"Test that creating a product with sale_price greater than or equal to regular_price\n        results in the API ignoring the sale_price and setting it to an empty string.\n    \n        Args:\n            setup_teardown (fixture): Fixture providing API helpers.\n            regular_price (str): Regular price of the product.\n            sale_price (str): Sale price of the product.\n    \n        Raises:\n            AssertionError: If the API or DB does not handle invalid sale_price correctly.\n        \"\"\"\n        # create payload with sale_price and regular_price\n        payload = {\n            \"regular_price\" : regular_price,\n            \"sale_price\": sale_price\n        }\n    \n        # create product with payload\n        post_response = setup_teardown['products_api_helper'].call_create_product(payload)\n        product_id = post_response['id']\n        setup_teardown['product_ids'].append(product_id)\n        logger.info(f\"POST response for sale_price > regular_price create product test: {post_response}\")\n    \n        # make GET call to make sure api ignores sale_price and sets it to an empty string.\n>       get_response = setup_teardown['generic_products_helper'].verify_product_is_created(post_response)\n\ntests/backend/products/test_create_products_regression.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_products_helper.py:151: in verify_product_is_created\n    db_product = self.products_dao.get_product_by_id(product_id)\nsrc/dao/products_dao.py:60: in get_product_by_id\n    return self.db_helper.execute_select(sql)\nsrc/utilities/dbUtility.py:31: in execute_select\n    conn = self.create_connection()\nsrc/utilities/dbUtility.py:23: in create_connection\n    connection = pymysql.connect(host=self.host, user=self.creds['db_user'],\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:361: in __init__\n    self.connect()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:669: in connect\n    self._request_authentication()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:979: in _request_authentication\n    auth_packet = _auth.caching_sha2_password_auth(self, auth_packet)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:267: in caching_sha2_password_auth\n    data = sha2_rsa_encrypt(conn.password, conn.salt, conn.server_public_key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npassword = b'SpecialStudentsSecret'\nsalt = b\"?y\\x15Y\\x15bPsb\\x0e\\x11yg\\x07Y\\x1a'2/D\"\npublic_key = b'-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmE7rN2b1SK+cHlbBJuhy\\n7WnyqChNyu7BrMutBWtlMO...EozxYH9BW+KJ23\\nvx4a0Hrs6Ui6XNKiYmsK9l/PwEwYt3phoWR0RAh27OM12+mxaNwalSUs0uosqNFr\\nNwIDAQAB\\n-----END PUBLIC KEY-----\\n'\n\n    def sha2_rsa_encrypt(password, salt, public_key):\n        \"\"\"Encrypt password with salt and public_key.\n    \n        Used for sha256_password and caching_sha2_password.\n        \"\"\"\n        if not _have_cryptography:\n>           raise RuntimeError(\n                \"'cryptography' package is required for sha256_password or\"\n                + \" caching_sha2_password auth methods\"\n            )\nE           RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:144: RuntimeError","steps":[],"attachments":[{"uid":"5e13542fcf1a4a40","name":"log","source":"5e13542fcf1a4a40.txt","type":"text/plain","size":2490}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup_teardown::0","time":{"start":1757921068675,"stop":1757921070872,"duration":2197},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"invalid_sale_price"},{"name":"tag","value":"ebe31"},{"name":"tag","value":"products"},{"name":"tag","value":"create_product"},{"name":"parentSuite","value":"tests.backend.products"},{"name":"suite","value":"test_create_products_regression"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2086-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.products.test_create_products_regression"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"regular_price","value":"'0.00'"},{"name":"sale_price","value":"'9999999.99'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["invalid_sale_price","ebe31","create_product","products"]},"source":"39ae0725c26795fa.json","parameterValues":["'0.00'","'9999999.99'"]}