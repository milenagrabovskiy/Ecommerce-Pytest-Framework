{"uid":"73400fd8270d8cf5","name":"test_apply_coupon_twice_neg","fullName":"tests.backend.coupons.test_apply_coupons#test_apply_coupon_twice_neg","historyId":"667269ac38f01947940e7e334b632bb6","time":{"start":1757093861506,"stop":1757093861506,"duration":0},"description":"Verify that applying the same coupon twice to one order does not change the discount or order total.\n\nArgs:\n    apply_coupon_setup (dict): Fixture with DAOs, API helpers, and test data.\n\nAsserts:\n    - Order ID remains the same.\n    - Discount and total do not change after second application.\n    - Coupon code is identical for both applications.\n","descriptionHtml":"<p>Verify that applying the same coupon twice to one order does not change the discount or order total.</p>\n<p>Args:<br />\napply_coupon_setup (dict): Fixture with DAOs, API helpers, and test data.</p>\n<p>Asserts:<br />\n- Order ID remains the same.<br />\n- Discount and total do not change after second application.<br />\n- Coupon code is identical for both applications.</p>\n","status":"broken","statusMessage":"TypeError: 'dict' object cannot be interpreted as an integer","statusTrace":"apply_coupon_setup = {'coupon_ids': [35136], 'coupons_api_helper': <demostore_automation.src.api_helpers.CouponAPIHelper.CouponAPIHelper ob...src.dao.coupons_dao.CouponsDAO object at 0x7fbd9abcd940>, 'customer_email': 'betest_bwvamilkxgpyadq@supersqa.com', ...}\n\n    @pytest.mark.ebe13\n    def test_apply_coupon_twice_neg(apply_coupon_setup):\n        \"\"\"Verify that applying the same coupon twice to one order does not change the discount or order total.\n    \n        Args:\n            apply_coupon_setup (dict): Fixture with DAOs, API helpers, and test data.\n    \n        Asserts:\n            - Order ID remains the same.\n            - Discount and total do not change after second application.\n            - Coupon code is identical for both applications.\n        \"\"\"\n        customer_id = apply_coupon_setup['customer_id']\n        product_id = apply_coupon_setup['product_id']\n    \n>       order_response = apply_coupon_setup['generic_orders_helper'].create_order_for_customer(customer_id, product_id)\n\ntests/backend/coupons/test_apply_coupons.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_orders_helper.py:121: in create_order_for_customer\n    return self.create_order(product_args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object at 0x7fbd9abce270>\norder_qty = {'customer_id': 2710, 'line_items': [{'product_id': 20, 'quantity': 1}], 'shipping_lines': [{'method_id': 'free_shipping', 'method_title': 'Free Shipping', 'total': '0.00'}]}\nproduct_qty = 1, additional_args = None\n\n    def create_order(self, order_qty=1, product_qty=1, additional_args=None):\n        \"\"\"Create an order with optional custom arguments.\n    \n        Args:\n            additional_args (dict, optional): Fields to override or add to the order payload.\n            order_qty (int): Quantity of orders.\n            product_qty (int): Quantity of products.\n    \n        Returns:\n            dict: API response with the created order details.\n    \n        Raises:\n            TypeError: If `additional_args` is not a dict.\n            FileNotFoundError, IOError, PermissionError, UnicodeError: File read errors.\n        \"\"\"\n        # create full path regardless of os\n        payload_json_file = os.path.join(self.current_file_dir, '..', 'data', 'create_order_payload.json')\n    \n        try:\n            with open(payload_json_file, 'r') as f:\n                payload = json.load(f)\n    \n            if additional_args:\n                if not isinstance(additional_args, dict):\n                    raise TypeError(f\"File must be of type dict. Actual: {type(additional_args)}\")\n                payload.update(additional_args)\n    \n            if \"line_items\" not in payload:\n                random_product = self.products_dao.get_random_product_from_db(qty=1)\n                random_product_id = random_product[0]['ID']\n                payload[\"line_items\"] = [{\"product_id\": random_product_id, \"quantity\": product_qty}]\n    \n            else:\n                for i in payload[\"line_items\"]:\n                    i[\"quantity\"] = product_qty # if not line_items, payload will still take product_qty\n    \n    \n        except (FileNotFoundError, IOError, PermissionError, UnicodeError) as e:\n            logger.error(f\"Could not read payload file: {e}\")\n            raise\n    \n        create_order_responses = []\n>       for i in range(order_qty):\nE       TypeError: 'dict' object cannot be interpreted as an integer\n\nsrc/generic_helpers/generic_orders_helper.py:71: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"apply_coupon_setup","time":{"start":1757093859940,"stop":1757093860808,"duration":868},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify that applying the same coupon twice to one order does not change the discount or order total.\n\nArgs:\n    apply_coupon_setup (dict): Fixture with DAOs, API helpers, and test data.\n\nAsserts:\n    - Order ID remains the same.\n    - Discount and total do not change after second application.\n    - Coupon code is identical for both applications.\n","status":"broken","statusMessage":"TypeError: 'dict' object cannot be interpreted as an integer","statusTrace":"apply_coupon_setup = {'coupon_ids': [35136], 'coupons_api_helper': <demostore_automation.src.api_helpers.CouponAPIHelper.CouponAPIHelper ob...src.dao.coupons_dao.CouponsDAO object at 0x7fbd9abcd940>, 'customer_email': 'betest_bwvamilkxgpyadq@supersqa.com', ...}\n\n    @pytest.mark.ebe13\n    def test_apply_coupon_twice_neg(apply_coupon_setup):\n        \"\"\"Verify that applying the same coupon twice to one order does not change the discount or order total.\n    \n        Args:\n            apply_coupon_setup (dict): Fixture with DAOs, API helpers, and test data.\n    \n        Asserts:\n            - Order ID remains the same.\n            - Discount and total do not change after second application.\n            - Coupon code is identical for both applications.\n        \"\"\"\n        customer_id = apply_coupon_setup['customer_id']\n        product_id = apply_coupon_setup['product_id']\n    \n>       order_response = apply_coupon_setup['generic_orders_helper'].create_order_for_customer(customer_id, product_id)\n\ntests/backend/coupons/test_apply_coupons.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_orders_helper.py:121: in create_order_for_customer\n    return self.create_order(product_args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object at 0x7fbd9abce270>\norder_qty = {'customer_id': 2710, 'line_items': [{'product_id': 20, 'quantity': 1}], 'shipping_lines': [{'method_id': 'free_shipping', 'method_title': 'Free Shipping', 'total': '0.00'}]}\nproduct_qty = 1, additional_args = None\n\n    def create_order(self, order_qty=1, product_qty=1, additional_args=None):\n        \"\"\"Create an order with optional custom arguments.\n    \n        Args:\n            additional_args (dict, optional): Fields to override or add to the order payload.\n            order_qty (int): Quantity of orders.\n            product_qty (int): Quantity of products.\n    \n        Returns:\n            dict: API response with the created order details.\n    \n        Raises:\n            TypeError: If `additional_args` is not a dict.\n            FileNotFoundError, IOError, PermissionError, UnicodeError: File read errors.\n        \"\"\"\n        # create full path regardless of os\n        payload_json_file = os.path.join(self.current_file_dir, '..', 'data', 'create_order_payload.json')\n    \n        try:\n            with open(payload_json_file, 'r') as f:\n                payload = json.load(f)\n    \n            if additional_args:\n                if not isinstance(additional_args, dict):\n                    raise TypeError(f\"File must be of type dict. Actual: {type(additional_args)}\")\n                payload.update(additional_args)\n    \n            if \"line_items\" not in payload:\n                random_product = self.products_dao.get_random_product_from_db(qty=1)\n                random_product_id = random_product[0]['ID']\n                payload[\"line_items\"] = [{\"product_id\": random_product_id, \"quantity\": product_qty}]\n    \n            else:\n                for i in payload[\"line_items\"]:\n                    i[\"quantity\"] = product_qty # if not line_items, payload will still take product_qty\n    \n    \n        except (FileNotFoundError, IOError, PermissionError, UnicodeError) as e:\n            logger.error(f\"Could not read payload file: {e}\")\n            raise\n    \n        create_order_responses = []\n>       for i in range(order_qty):\nE       TypeError: 'dict' object cannot be interpreted as an integer\n\nsrc/generic_helpers/generic_orders_helper.py:71: TypeError","steps":[],"attachments":[{"uid":"73db3c0825b40114","name":"log","source":"73db3c0825b40114.txt","type":"text/plain","size":62}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"apply_coupon_setup::0","time":{"start":1757093861513,"stop":1757093861828,"duration":315},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"ebe13"},{"name":"tag","value":"applycoupon"},{"name":"parentSuite","value":"tests.backend.coupons"},{"name":"suite","value":"test_apply_coupons"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2182-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.coupons.test_apply_coupons"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ebe13","applycoupon"]},"source":"73400fd8270d8cf5.json","parameterValues":[]}