{"uid":"901743833bbb1cf8","name":"test_apply_coupon_to_new_order[apply_free_coupon]","fullName":"tests.backend.coupons.test_apply_coupons#test_apply_coupon_to_new_order","historyId":"73133e2a06b733ae6aa29c56b6870b2e","time":{"start":1756574668921,"stop":1756574668922,"duration":1},"description":"Test applying a coupon to a newly created order.\n\nThis test:\n1. Creates a new order for a random or fixed product.\n2. Retrieves or creates a coupon depending on the discount type.\n3. Applies the coupon to the order via API.\n4. Verifies that the order total and discount are correct.\n5. Checks that the customer is listed as having used the coupon.\n\nArgs:\n    apply_coupon_setup (dict): Fixture providing setup info and helpers.\n    discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).\n\nAsserts:\n    - Order total before and after applying coupon.\n    - Discount applied matches expected.\n    - Coupon is valid and published.\n    - Customer is correctly listed as a coupon user.\n","descriptionHtml":"<p>Test applying a coupon to a newly created order.</p>\n<p>This test:</p>\n<ol>\n<li>Creates a new order for a random or fixed product.</li>\n<li>Retrieves or creates a coupon depending on the discount type.</li>\n<li>Applies the coupon to the order via API.</li>\n<li>Verifies that the order total and discount are correct.</li>\n<li>Checks that the customer is listed as having used the coupon.</li>\n</ol>\n<p>Args:<br />\napply_coupon_setup (dict): Fixture providing setup info and helpers.<br />\ndiscount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).</p>\n<p>Asserts:<br />\n- Order total before and after applying coupon.<br />\n- Discount applied matches expected.<br />\n- Coupon is valid and published.<br />\n- Customer is correctly listed as a coupon user.</p>\n","status":"broken","statusMessage":"TypeError: 'dict' object cannot be interpreted as an integer","statusTrace":"apply_coupon_setup = {'coupon_ids': [], 'coupons_api_helper': <demostore_automation.src.api_helpers.CouponAPIHelper.CouponAPIHelper object ...tion.src.dao.coupons_dao.CouponsDAO object at 0x7f52ee8692b0>, 'customer_email': 'tcid29_gnvmcplmwj@supersqa.com', ...}\ndiscount_type = 'free_coupon'\n\n    @pytest.mark.parametrize(\n        \"discount_type\",\n        [\n            pytest.param(\"percent\", marks=[pytest.mark.applycoupon1], id=\"apply_'percent'_coupon\"),\n            pytest.param(\"fixed_cart\", marks=[pytest.mark.applycoupon2], id=\"apply_'fixed_cart'_coupon\"),\n            pytest.param(\"fixed_product\", marks=[pytest.mark.applycoupon3], id=\"apply_'fixed_product'_coupon\"),\n            pytest.param(\"free_coupon\", marks=[pytest.mark.applycoupon4], id=\"apply_free_coupon\")\n        ]\n    )\n    \n    @pytest.mark.applycoupon\n    def test_apply_coupon_to_new_order(apply_coupon_setup, discount_type):\n        \"\"\"Test applying a coupon to a newly created order.\n    \n        This test:\n        1. Creates a new order for a random or fixed product.\n        2. Retrieves or creates a coupon depending on the discount type.\n        3. Applies the coupon to the order via API.\n        4. Verifies that the order total and discount are correct.\n        5. Checks that the customer is listed as having used the coupon.\n    \n        Args:\n            apply_coupon_setup (dict): Fixture providing setup info and helpers.\n            discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).\n    \n        Asserts:\n            - Order total before and after applying coupon.\n            - Discount applied matches expected.\n            - Coupon is valid and published.\n            - Customer is correctly listed as a coupon user.\n        \"\"\"\n    \n        if discount_type == \"fixed_product\":\n            product_id = 34 # hardcoded for V-neck shirt, a reg price variable product\n        # fetch random product from DB\n        else:\n            product_id = apply_coupon_setup['product_id']\n        logger.info(f\"DB product id: {product_id} DB product name: {apply_coupon_setup['random_product']['post_title']}\")\n    \n        # fetch random customer from DB\n        customer_id = apply_coupon_setup['customer_id']\n        customer_email = apply_coupon_setup['customer_email']\n        logger.info(f\"DB customer id: {customer_id} DB customer email: {customer_email}\")\n    \n        # create order with custom args\n        product_args = {\"line_items\": [{\"product_id\": product_id, \"quantity\": 1}]}\n        product_args.update({\"customer_id\": customer_id})\n        product_args.update({\n            \"shipping_lines\": [\n                {\n                    \"method_id\": \"free_shipping\",  # overwrite 'shipping_lines' for free shipping\n                    \"method_title\": \"Free Shipping\",\n                    \"total\": \"0.00\"\n                }\n            ]\n        })\n>       order_response = apply_coupon_setup['generic_orders_helper'].create_order(product_args)\n\ntests/backend/coupons/test_apply_coupons.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object at 0x7f52ee869be0>\norder_qty = {'customer_id': 1148, 'line_items': [{'product_id': 31, 'quantity': 1}], 'shipping_lines': [{'method_id': 'free_shipping', 'method_title': 'Free Shipping', 'total': '0.00'}]}\nproduct_qty = 1, additional_args = None\n\n    def create_order(self, order_qty=1, product_qty=1, additional_args=None):\n        \"\"\"Create an order with optional custom arguments.\n    \n        Args:\n            additional_args (dict, optional): Fields to override or add to the order payload.\n            order_qty (int): Quantity of orders.\n            product_qty (int): Quantity of products.\n    \n        Returns:\n            dict: API response with the created order details.\n    \n        Raises:\n            TypeError: If `additional_args` is not a dict.\n            FileNotFoundError, IOError, PermissionError, UnicodeError: File read errors.\n        \"\"\"\n        # create full path regardless of os\n        payload_json_file = os.path.join(self.current_file_dir, '..', 'data', 'create_order_payload.json')\n    \n        try:\n            with open(payload_json_file, 'r') as f:\n                payload = json.load(f)\n    \n            if additional_args:\n                if not isinstance(additional_args, dict):\n                    raise TypeError(f\"File must be of type dict. Actual: {type(additional_args)}\")\n                payload.update(additional_args)\n    \n            if \"line_items\" not in payload:\n                random_product = self.products_dao.get_random_product_from_db(qty=1)\n                random_product_id = random_product[0]['ID']\n                payload[\"line_items\"] = [{\"product_id\": random_product_id, \"quantity\": product_qty}]\n    \n            else:\n                for i in payload[\"line_items\"]:\n                    i[\"quantity\"] = product_qty # if not line_items, payload will still take product_qty\n    \n    \n        except (FileNotFoundError, IOError, PermissionError, UnicodeError) as e:\n            logger.error(f\"Could not read payload file: {e}\")\n            raise\n    \n        create_order_responses = []\n>       for i in range(order_qty):\nE       TypeError: 'dict' object cannot be interpreted as an integer\n\nsrc/generic_helpers/generic_orders_helper.py:72: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"apply_coupon_setup","time":{"start":1756574668551,"stop":1756574668876,"duration":325},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test applying a coupon to a newly created order.\n\nThis test:\n1. Creates a new order for a random or fixed product.\n2. Retrieves or creates a coupon depending on the discount type.\n3. Applies the coupon to the order via API.\n4. Verifies that the order total and discount are correct.\n5. Checks that the customer is listed as having used the coupon.\n\nArgs:\n    apply_coupon_setup (dict): Fixture providing setup info and helpers.\n    discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).\n\nAsserts:\n    - Order total before and after applying coupon.\n    - Discount applied matches expected.\n    - Coupon is valid and published.\n    - Customer is correctly listed as a coupon user.\n","status":"broken","statusMessage":"TypeError: 'dict' object cannot be interpreted as an integer","statusTrace":"apply_coupon_setup = {'coupon_ids': [], 'coupons_api_helper': <demostore_automation.src.api_helpers.CouponAPIHelper.CouponAPIHelper object ...tion.src.dao.coupons_dao.CouponsDAO object at 0x7f52ee8692b0>, 'customer_email': 'tcid29_gnvmcplmwj@supersqa.com', ...}\ndiscount_type = 'free_coupon'\n\n    @pytest.mark.parametrize(\n        \"discount_type\",\n        [\n            pytest.param(\"percent\", marks=[pytest.mark.applycoupon1], id=\"apply_'percent'_coupon\"),\n            pytest.param(\"fixed_cart\", marks=[pytest.mark.applycoupon2], id=\"apply_'fixed_cart'_coupon\"),\n            pytest.param(\"fixed_product\", marks=[pytest.mark.applycoupon3], id=\"apply_'fixed_product'_coupon\"),\n            pytest.param(\"free_coupon\", marks=[pytest.mark.applycoupon4], id=\"apply_free_coupon\")\n        ]\n    )\n    \n    @pytest.mark.applycoupon\n    def test_apply_coupon_to_new_order(apply_coupon_setup, discount_type):\n        \"\"\"Test applying a coupon to a newly created order.\n    \n        This test:\n        1. Creates a new order for a random or fixed product.\n        2. Retrieves or creates a coupon depending on the discount type.\n        3. Applies the coupon to the order via API.\n        4. Verifies that the order total and discount are correct.\n        5. Checks that the customer is listed as having used the coupon.\n    \n        Args:\n            apply_coupon_setup (dict): Fixture providing setup info and helpers.\n            discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).\n    \n        Asserts:\n            - Order total before and after applying coupon.\n            - Discount applied matches expected.\n            - Coupon is valid and published.\n            - Customer is correctly listed as a coupon user.\n        \"\"\"\n    \n        if discount_type == \"fixed_product\":\n            product_id = 34 # hardcoded for V-neck shirt, a reg price variable product\n        # fetch random product from DB\n        else:\n            product_id = apply_coupon_setup['product_id']\n        logger.info(f\"DB product id: {product_id} DB product name: {apply_coupon_setup['random_product']['post_title']}\")\n    \n        # fetch random customer from DB\n        customer_id = apply_coupon_setup['customer_id']\n        customer_email = apply_coupon_setup['customer_email']\n        logger.info(f\"DB customer id: {customer_id} DB customer email: {customer_email}\")\n    \n        # create order with custom args\n        product_args = {\"line_items\": [{\"product_id\": product_id, \"quantity\": 1}]}\n        product_args.update({\"customer_id\": customer_id})\n        product_args.update({\n            \"shipping_lines\": [\n                {\n                    \"method_id\": \"free_shipping\",  # overwrite 'shipping_lines' for free shipping\n                    \"method_title\": \"Free Shipping\",\n                    \"total\": \"0.00\"\n                }\n            ]\n        })\n>       order_response = apply_coupon_setup['generic_orders_helper'].create_order(product_args)\n\ntests/backend/coupons/test_apply_coupons.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object at 0x7f52ee869be0>\norder_qty = {'customer_id': 1148, 'line_items': [{'product_id': 31, 'quantity': 1}], 'shipping_lines': [{'method_id': 'free_shipping', 'method_title': 'Free Shipping', 'total': '0.00'}]}\nproduct_qty = 1, additional_args = None\n\n    def create_order(self, order_qty=1, product_qty=1, additional_args=None):\n        \"\"\"Create an order with optional custom arguments.\n    \n        Args:\n            additional_args (dict, optional): Fields to override or add to the order payload.\n            order_qty (int): Quantity of orders.\n            product_qty (int): Quantity of products.\n    \n        Returns:\n            dict: API response with the created order details.\n    \n        Raises:\n            TypeError: If `additional_args` is not a dict.\n            FileNotFoundError, IOError, PermissionError, UnicodeError: File read errors.\n        \"\"\"\n        # create full path regardless of os\n        payload_json_file = os.path.join(self.current_file_dir, '..', 'data', 'create_order_payload.json')\n    \n        try:\n            with open(payload_json_file, 'r') as f:\n                payload = json.load(f)\n    \n            if additional_args:\n                if not isinstance(additional_args, dict):\n                    raise TypeError(f\"File must be of type dict. Actual: {type(additional_args)}\")\n                payload.update(additional_args)\n    \n            if \"line_items\" not in payload:\n                random_product = self.products_dao.get_random_product_from_db(qty=1)\n                random_product_id = random_product[0]['ID']\n                payload[\"line_items\"] = [{\"product_id\": random_product_id, \"quantity\": product_qty}]\n    \n            else:\n                for i in payload[\"line_items\"]:\n                    i[\"quantity\"] = product_qty # if not line_items, payload will still take product_qty\n    \n    \n        except (FileNotFoundError, IOError, PermissionError, UnicodeError) as e:\n            logger.error(f\"Could not read payload file: {e}\")\n            raise\n    \n        create_order_responses = []\n>       for i in range(order_qty):\nE       TypeError: 'dict' object cannot be interpreted as an integer\n\nsrc/generic_helpers/generic_orders_helper.py:72: TypeError","steps":[],"attachments":[{"uid":"83e93f0ef73f3822","name":"log","source":"83e93f0ef73f3822.txt","type":"text/plain","size":161}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"apply_coupon_setup::0","time":{"start":1756574668926,"stop":1756574668927,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"applycoupon"},{"name":"tag","value":"applycoupon4"},{"name":"parentSuite","value":"tests.backend.coupons"},{"name":"suite","value":"test_apply_coupons"},{"name":"host","value":"pkrvmccyg1gnepe"},{"name":"thread","value":"2086-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.coupons.test_apply_coupons"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"discount_type","value":"'free_coupon'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["applycoupon4","applycoupon"]},"source":"901743833bbb1cf8.json","parameterValues":["'free_coupon'"]}