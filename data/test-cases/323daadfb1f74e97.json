{"uid":"323daadfb1f74e97","name":"test_create_order[guestuser_1_ord_1_prod]","fullName":"tests.backend.orders.test_create_order_smoke#test_create_order","historyId":"2619deacc039c57a933e03b7dfe04016","time":{"start":1757095927042,"stop":1757095928779,"duration":1737},"description":"Verify that orders can be created and retrieved via the WooCommerce API.\n\nThis test covers multiple scenarios using parameterization:\n    - Guest user creating 1 order with 1 item.\n    - Guest user creating 1 order with multiple items.\n    - Guest user creating multiple orders with 1 item each.\n    - Registered user creating 1 order with multiple items.\n    - Registered user creating multiple orders with 1 item each.\n    - Registered user creating multiple orders with multiple items each.\n\nFor each scenario, asserts the following:\n    - API response is not empty.\n    - Order ID is an integer.\n    - Customer ID matches expected value (0 for guest, or the correct customer ID).\n    - Order key format starts with 'wc_order_'.\n    - Newly created order can be retrieved via API and exists in the database.\n\nArgs:\n    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.\n    user_type (str): Type of user creating the order, either \"guest_user\" or \"registered_user\".\n    order_qty (int): Quantity of orders created via API.\n    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.\n","descriptionHtml":"<p>Verify that orders can be created and retrieved via the WooCommerce API.</p>\n<p>This test covers multiple scenarios using parameterization:<br />\n- Guest user creating 1 order with 1 item.<br />\n- Guest user creating 1 order with multiple items.<br />\n- Guest user creating multiple orders with 1 item each.<br />\n- Registered user creating 1 order with multiple items.<br />\n- Registered user creating multiple orders with 1 item each.<br />\n- Registered user creating multiple orders with multiple items each.</p>\n<p>For each scenario, asserts the following:<br />\n- API response is not empty.<br />\n- Order ID is an integer.<br />\n- Customer ID matches expected value (0 for guest, or the correct customer ID).<br />\n- Order key format starts with 'wc_order_'.<br />\n- Newly created order can be retrieved via API and exists in the database.</p>\n<p>Args:<br />\nmy_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.<br />\nuser_type (str): Type of user creating the order, either &quot;guest_user&quot; or &quot;registered_user&quot;.<br />\norder_qty (int): Quantity of orders created via API.<br />\nproduct_qty (int): Quantity of products in 'line_items' in payload to create order via API.</p>\n","status":"broken","statusMessage":"TypeError: string indices must be integers, not 'str'","statusTrace":"my_orders_smoke_setup = {'generic_orders_helper': <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object a...<demostore_automation.src.api_helpers.OrdersAPIHelper.OrdersAPIHelper object at 0x7f7320f304d0>, 'product_id': 20, ...}\nuser_type = 'guest_user', order_qty = 1, product_qty = 1\n\n    @pytest.mark.parametrize(\n         \"user_type, order_qty, product_qty\",\n        [\n            pytest.param(\"guest_user\", 1, 5, marks=[pytest.mark.orders, pytest.mark.ecomorders1], id=\"guestuser_1_ord_5_prods\"),\n            pytest.param(\"guest_user\", 5, 1, marks=[pytest.mark.orders, pytest.mark.ecomorders1], id=\"guestuser_5_ord_1_prod\"),\n            pytest.param(\"guest_user\", 1, 1, marks=[pytest.mark.orders, pytest.mark.ecomorders1], id=\"guestuser_1_ord_1_prod\"),\n            pytest.param(\"registered_user\", 1, 5, marks=[pytest.mark.orders, pytest.mark.ecomorders2], id=\"reg_user_1_ord_5_prods\"),\n            pytest.param(\"registered_user\", 5, 1, marks=[pytest.mark.orders, pytest.mark.ecomorders2], id=\"reg_user_5_ord_1_prod\"),\n            pytest.param(\"registered_user\", 5, 5, marks=[pytest.mark.orders, pytest.mark.ecomorders2], id=\"reg_user_5_ord_5_prod\")\n        ]\n    )\n    \n    def test_create_order(my_orders_smoke_setup, user_type, order_qty, product_qty):\n        \"\"\"Verify that orders can be created and retrieved via the WooCommerce API.\n    \n        This test covers multiple scenarios using parameterization:\n            - Guest user creating 1 order with 1 item.\n            - Guest user creating 1 order with multiple items.\n            - Guest user creating multiple orders with 1 item each.\n            - Registered user creating 1 order with multiple items.\n            - Registered user creating multiple orders with 1 item each.\n            - Registered user creating multiple orders with multiple items each.\n    \n        For each scenario, asserts the following:\n            - API response is not empty.\n            - Order ID is an integer.\n            - Customer ID matches expected value (0 for guest, or the correct customer ID).\n            - Order key format starts with 'wc_order_'.\n            - Newly created order can be retrieved via API and exists in the database.\n    \n        Args:\n            my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.\n            user_type (str): Type of user creating the order, either \"guest_user\" or \"registered_user\".\n            order_qty (int): Quantity of orders created via API.\n            product_qty (int): Quantity of products in 'line_items' in payload to create order via API.\n        \"\"\"\n        product_id = my_orders_smoke_setup[\"product_id\"]\n        product_price = my_orders_smoke_setup[\"product_price\"]\n        logger.info(f\"Product ID: {product_id}, Product price: {product_price}\")\n    \n    \n        #overwrite 'line_items' with custom product(s)\n        product_args = {\"line_items\": [{\"product_id\": product_id, \"quantity\": product_qty}]}\n        logger.info(f\"Product quantity in line_items: {product_qty}\")\n        if user_type == \"registered_user\":\n            customers_dao = CustomersDAO()\n            random_customer = customers_dao.get_random_customer_from_db(qty=1)[0]\n            expected_customer_id = random_customer['ID']\n            product_args.update({\"customer_id\": random_customer['ID']})\n            logger.info(f\"Fetched random customer from database with id: {expected_customer_id}\")\n        else:\n            expected_customer_id = 0\n    \n        # make api call and verify it is not empty\n        create_order_responses = my_orders_smoke_setup[\"generic_orders_helper\"].create_order(order_qty=order_qty, additional_args=product_args)\n        for create_order_response in create_order_responses:\n            assert create_order_response, f\"Create order as guest user API response is empty\"\n    \n            # verify customer id\n>           assert create_order_response['customer_id'] == expected_customer_id, \\\n                f\"Incorrect customer id in api response. Expected: {expected_customer_id}, Actual: {create_order_response['customer_id']}\"\nE           TypeError: string indices must be integers, not 'str'\n\ntests/backend/orders/test_create_order_smoke.py:113: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"my_orders_smoke_setup","time":{"start":1757095921181,"stop":1757095921522,"duration":341},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify that orders can be created and retrieved via the WooCommerce API.\n\nThis test covers multiple scenarios using parameterization:\n    - Guest user creating 1 order with 1 item.\n    - Guest user creating 1 order with multiple items.\n    - Guest user creating multiple orders with 1 item each.\n    - Registered user creating 1 order with multiple items.\n    - Registered user creating multiple orders with 1 item each.\n    - Registered user creating multiple orders with multiple items each.\n\nFor each scenario, asserts the following:\n    - API response is not empty.\n    - Order ID is an integer.\n    - Customer ID matches expected value (0 for guest, or the correct customer ID).\n    - Order key format starts with 'wc_order_'.\n    - Newly created order can be retrieved via API and exists in the database.\n\nArgs:\n    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.\n    user_type (str): Type of user creating the order, either \"guest_user\" or \"registered_user\".\n    order_qty (int): Quantity of orders created via API.\n    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.\n","status":"broken","statusMessage":"TypeError: string indices must be integers, not 'str'","statusTrace":"my_orders_smoke_setup = {'generic_orders_helper': <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object a...<demostore_automation.src.api_helpers.OrdersAPIHelper.OrdersAPIHelper object at 0x7f7320f304d0>, 'product_id': 20, ...}\nuser_type = 'guest_user', order_qty = 1, product_qty = 1\n\n    @pytest.mark.parametrize(\n         \"user_type, order_qty, product_qty\",\n        [\n            pytest.param(\"guest_user\", 1, 5, marks=[pytest.mark.orders, pytest.mark.ecomorders1], id=\"guestuser_1_ord_5_prods\"),\n            pytest.param(\"guest_user\", 5, 1, marks=[pytest.mark.orders, pytest.mark.ecomorders1], id=\"guestuser_5_ord_1_prod\"),\n            pytest.param(\"guest_user\", 1, 1, marks=[pytest.mark.orders, pytest.mark.ecomorders1], id=\"guestuser_1_ord_1_prod\"),\n            pytest.param(\"registered_user\", 1, 5, marks=[pytest.mark.orders, pytest.mark.ecomorders2], id=\"reg_user_1_ord_5_prods\"),\n            pytest.param(\"registered_user\", 5, 1, marks=[pytest.mark.orders, pytest.mark.ecomorders2], id=\"reg_user_5_ord_1_prod\"),\n            pytest.param(\"registered_user\", 5, 5, marks=[pytest.mark.orders, pytest.mark.ecomorders2], id=\"reg_user_5_ord_5_prod\")\n        ]\n    )\n    \n    def test_create_order(my_orders_smoke_setup, user_type, order_qty, product_qty):\n        \"\"\"Verify that orders can be created and retrieved via the WooCommerce API.\n    \n        This test covers multiple scenarios using parameterization:\n            - Guest user creating 1 order with 1 item.\n            - Guest user creating 1 order with multiple items.\n            - Guest user creating multiple orders with 1 item each.\n            - Registered user creating 1 order with multiple items.\n            - Registered user creating multiple orders with 1 item each.\n            - Registered user creating multiple orders with multiple items each.\n    \n        For each scenario, asserts the following:\n            - API response is not empty.\n            - Order ID is an integer.\n            - Customer ID matches expected value (0 for guest, or the correct customer ID).\n            - Order key format starts with 'wc_order_'.\n            - Newly created order can be retrieved via API and exists in the database.\n    \n        Args:\n            my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.\n            user_type (str): Type of user creating the order, either \"guest_user\" or \"registered_user\".\n            order_qty (int): Quantity of orders created via API.\n            product_qty (int): Quantity of products in 'line_items' in payload to create order via API.\n        \"\"\"\n        product_id = my_orders_smoke_setup[\"product_id\"]\n        product_price = my_orders_smoke_setup[\"product_price\"]\n        logger.info(f\"Product ID: {product_id}, Product price: {product_price}\")\n    \n    \n        #overwrite 'line_items' with custom product(s)\n        product_args = {\"line_items\": [{\"product_id\": product_id, \"quantity\": product_qty}]}\n        logger.info(f\"Product quantity in line_items: {product_qty}\")\n        if user_type == \"registered_user\":\n            customers_dao = CustomersDAO()\n            random_customer = customers_dao.get_random_customer_from_db(qty=1)[0]\n            expected_customer_id = random_customer['ID']\n            product_args.update({\"customer_id\": random_customer['ID']})\n            logger.info(f\"Fetched random customer from database with id: {expected_customer_id}\")\n        else:\n            expected_customer_id = 0\n    \n        # make api call and verify it is not empty\n        create_order_responses = my_orders_smoke_setup[\"generic_orders_helper\"].create_order(order_qty=order_qty, additional_args=product_args)\n        for create_order_response in create_order_responses:\n            assert create_order_response, f\"Create order as guest user API response is empty\"\n    \n            # verify customer id\n>           assert create_order_response['customer_id'] == expected_customer_id, \\\n                f\"Incorrect customer id in api response. Expected: {expected_customer_id}, Actual: {create_order_response['customer_id']}\"\nE           TypeError: string indices must be integers, not 'str'\n\ntests/backend/orders/test_create_order_smoke.py:113: TypeError","steps":[],"attachments":[{"uid":"7f76c036f7e348c2","name":"log","source":"7f76c036f7e348c2.txt","type":"text/plain","size":2629}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"my_orders_smoke_setup::0","time":{"start":1757095943530,"stop":1757095947949,"duration":4419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"orders"},{"name":"tag","value":"ecomorders1"},{"name":"parentSuite","value":"tests.backend.orders"},{"name":"suite","value":"test_create_order_smoke"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.orders.test_create_order_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"order_qty","value":"1"},{"name":"product_qty","value":"1"},{"name":"user_type","value":"'guest_user'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["orders","ecomorders1"]},"source":"323daadfb1f74e97.json","parameterValues":["1","1","'guest_user'"]}