"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Mon Sep 22 07:26:34 UTC 2025","Mon Sep 22 07:26:35 UTC 2025","1252","tests.backend.products","test_create_product_reviews","","","","test_create_product_review[review-highest boundary]","Test creation and verification of a product review.

Steps:
1. Create a simple product via API.
2. Optionally create a registered customer and order if `customer_bought` is True.
3. Create a product review with the given rating.
4. Verify review exists and is correct via both API and database.

Args:
    setup_teardown (fixture): Fixture providing product helpers, API helpers, and teardown logic.
    rating (int): Rating for the review (0-5 recommended).
    customer_bought (bool): Whether the review is by a registered customer.

Assertions:
    - Review exists in API response with correct rating, status, and reviewer info.
    - Review exists in DB with correct customer_id (if registered), email, and approved status.
"
"passed","Mon Sep 22 07:26:53 UTC 2025","Mon Sep 22 07:26:55 UTC 2025","2360","tests.backend.products","test_create_products_regression","","","","test_price_boundaries[sale price=0.01]","Test creating a product with valid sale_price within acceptable boundaries.

This test verifies that when a product is created with a sale_price that is
less than the regular_price, the API stores the correct values for both
regular_price and sale_price, and the product is properly recorded in the DB.

Args:
    setup_teardown (fixture): Fixture providing API and database helpers.
    regular_price (str): Regular price to use when creating the product.
    sale_price (str): Sale price to use when creating the product.

Raises:
    AssertionError: If the API or database does not store prices correctly.
"
"passed","Mon Sep 22 07:27:01 UTC 2025","Mon Sep 22 07:27:02 UTC 2025","1383","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_simple_virtual_product0]",""
"passed","Mon Sep 22 07:25:50 UTC 2025","Mon Sep 22 07:25:52 UTC 2025","2215","tests.backend.orders","test_create_order_notes","","","","test_create_order_note[reg_user_1_notes]","Test creating one or multiple order notes for a given user type.

Args:
    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.
    user_type (str): 'guest_user' or 'registered_user'.
    quantity (int): Number of notes to create.
"
"skipped","Mon Sep 22 07:26:41 UTC 2025","Mon Sep 22 07:26:42 UTC 2025","328","tests.backend.products","test_create_products_negative","","","","test_create_product_invalid_param[invalid regular_price: random string]","Test product creation with invalid parameters.

Sends a create product request with invalid parameter values and
verifies that the WooCommerce API returns an appropriate error.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
    param (str): The product parameter being tested (e.g., ""type"", ""sku"").
    value (any): The invalid value to send for the parameter.
"
"skipped","Mon Sep 22 07:26:31 UTC 2025","Mon Sep 22 07:26:32 UTC 2025","752","tests.backend.orders","test_order_refunds","","","","test_order_refund[update to random string]","Test WooCommerce order refunds via API.

Steps:
1. Create a new order with a product.
2. Apply refund based on `refund_type`:
   - full: refund entire order
   - partial: refund half the order
   - refund_1_product: refund a single product
3. Verify that the refund amount returned by the API matches expected value.

Args:
    my_orders_smoke_setup (fixture): Fixture providing product, order, and helper setup.
    refund_type (str): Type of refund to apply. One of ""full"", ""partial"", ""refund_1_product"".

Assertions:
    - Order creation API returns valid responses.
    - Refund API returns the correct refund amount.
"
"passed","Mon Sep 22 07:26:10 UTC 2025","Mon Sep 22 07:26:17 UTC 2025","6084","tests.backend.orders","test_create_order_smoke","","","","test_create_order[reg_user_5_ord_1_prod]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Mon Sep 22 07:25:43 UTC 2025","Mon Sep 22 07:25:50 UTC 2025","6477","tests.backend.orders","test_create_order_notes","","","","test_create_order_note[guestuser_5_notes]","Test creating one or multiple order notes for a given user type.

Args:
    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.
    user_type (str): 'guest_user' or 'registered_user'.
    quantity (int): Number of notes to create.
"
"passed","Mon Sep 22 07:27:06 UTC 2025","Mon Sep 22 07:27:08 UTC 2025","1401","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_external_product]",""
"passed","Mon Sep 22 07:25:14 UTC 2025","Mon Sep 22 07:25:15 UTC 2025","1270","tests.backend.coupons","test_apply_coupons","","","","test_apply_expired_coupon_neg","Verify that applying an expired coupon to an order fails.

Creates an expired coupon, attempts to apply it to a new order,
and checks that the API returns the correct error and that the coupon
is recognized as invalid.

Args:
    apply_coupon_setup (dict): Fixture with DAOs, API helpers, and test data.

Asserts:
    - Coupon is expired.
    - API response matches expected error for expired coupons.
"
"passed","Mon Sep 22 07:26:23 UTC 2025","Mon Sep 22 07:26:23 UTC 2025","407","tests.backend.orders","test_create_order_smoke","","","","test_create_order_empty_line_items_negative","Verify that an order can be created without products (empty line_items).

WooCommerce allows order creation without mandatory product fields.
This test ensures:
  - The order is created with an empty `line_items` list.
  - The order status is returned as ""completed"".

Args:
    my_orders_smoke_setup (fixture): Provides API helpers and teardown tracking.
"
"passed","Mon Sep 22 07:26:55 UTC 2025","Mon Sep 22 07:26:57 UTC 2025","1384","tests.backend.products","test_create_products_regression","","","","test_price_boundaries[very small sale price]","Test creating a product with valid sale_price within acceptable boundaries.

This test verifies that when a product is created with a sale_price that is
less than the regular_price, the API stores the correct values for both
regular_price and sale_price, and the product is properly recorded in the DB.

Args:
    setup_teardown (fixture): Fixture providing API and database helpers.
    regular_price (str): Regular price to use when creating the product.
    sale_price (str): Sale price to use when creating the product.

Raises:
    AssertionError: If the API or database does not store prices correctly.
"
"passed","Mon Sep 22 07:26:49 UTC 2025","Mon Sep 22 07:26:50 UTC 2025","1405","tests.backend.products","test_create_products_regression","","","","test_invalid_sales_price[letter string sale_price]","Test that creating a product with sale_price greater than or equal to regular_price
results in the API ignoring the sale_price and setting it to an empty string.

Args:
    setup_teardown (fixture): Fixture providing API helpers.
    regular_price (str): Regular price of the product.
    sale_price (str): Sale price of the product.

Raises:
    AssertionError: If the API or DB does not handle invalid sale_price correctly.
"
"passed","Mon Sep 22 07:25:00 UTC 2025","Mon Sep 22 07:25:05 UTC 2025","4806","tests.backend.coupons","test_apply_coupons","","","","test_apply_coupon_to_new_order[apply_'percent'_coupon]","Test applying a coupon to a newly created order.

This test:
1. Creates a new order for a random or fixed product.
2. Retrieves or creates a coupon depending on the discount type.
3. Applies the coupon to the order via API.
4. Verifies that the order total and discount are correct.
5. Checks that the customer is listed as having used the coupon.

Args:
    apply_coupon_setup (dict): Fixture providing setup info and helpers.
    discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).

Asserts:
    - Order total before and after applying coupon.
    - Discount applied matches expected.
    - Coupon is valid and published.
    - Customer is correctly listed as a coupon user.
"
"passed","Mon Sep 22 07:25:19 UTC 2025","Mon Sep 22 07:25:20 UTC 2025","578","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_with_discount_type[percent]","Test creating a coupon with various valid discount types.

Verifies that the POST API creates the coupon correctly and the GET API
retrieves the coupon with the expected values.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance and coupon IDs list.
    discount_type (str or None): Discount type to test; defaults to 'fixed_cart' if None.

Raises:
    AssertionError: If the POST or GET API responses do not match expected values.
"
"passed","Mon Sep 22 07:25:35 UTC 2025","Mon Sep 22 07:25:37 UTC 2025","1755","tests.backend.orders","test_change_order_status","","","","test_change_order_status[update to failed]","Test changing WooCommerce order status and verifying API and DB consistency.

Steps:
1. Create an order with default status 'processing'.
2. Update the order to the specified `order_status`.
3. Verify the update via the API response.
4. Verify the order exists in the database with the correct updated status.
5. For certain statuses (completed, cancelled, refunded), validate specific fields like
   'needs_payment', 'date_completed', and 'refunds'.

Args:
    my_orders_smoke_setup (fixture): Fixture providing product info, API helpers, and teardown logic.
    order_status (str): The target status to update the order to (e.g., ""completed"", ""refunded"").

Assertions:
    - The order status is correctly updated in the API response.
    - The order ID remains unchanged after update.
    - API and DB responses match for the updated order.
    - Relevant fields (like 'needs_payment' or 'date_completed') are correctly set for specific statuses.
"
"passed","Mon Sep 22 07:26:40 UTC 2025","Mon Sep 22 07:26:40 UTC 2025","260","tests.backend.products","test_create_products_negative","","","","test_create_product_invalid_param[invalid product sku:str]","Test product creation with invalid parameters.

Sends a create product request with invalid parameter values and
verifies that the WooCommerce API returns an appropriate error.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
    param (str): The product parameter being tested (e.g., ""type"", ""sku"").
    value (any): The invalid value to send for the parameter.
"
"passed","Mon Sep 22 07:26:17 UTC 2025","Mon Sep 22 07:26:23 UTC 2025","6073","tests.backend.orders","test_create_order_smoke","","","","test_create_order[reg_user_5_ord_5_prod]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Mon Sep 22 07:25:21 UTC 2025","Mon Sep 22 07:25:22 UTC 2025","561","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_with_discount_type[None]","Test creating a coupon with various valid discount types.

Verifies that the POST API creates the coupon correctly and the GET API
retrieves the coupon with the expected values.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance and coupon IDs list.
    discount_type (str or None): Discount type to test; defaults to 'fixed_cart' if None.

Raises:
    AssertionError: If the POST or GET API responses do not match expected values.
"
"passed","Mon Sep 22 07:26:50 UTC 2025","Mon Sep 22 07:26:51 UTC 2025","1375","tests.backend.products","test_create_products_regression","","","","test_price_boundaries[sale price one cent off of regular]","Test creating a product with valid sale_price within acceptable boundaries.

This test verifies that when a product is created with a sale_price that is
less than the regular_price, the API stores the correct values for both
regular_price and sale_price, and the product is properly recorded in the DB.

Args:
    setup_teardown (fixture): Fixture providing API and database helpers.
    regular_price (str): Regular price to use when creating the product.
    sale_price (str): Sale price to use when creating the product.

Raises:
    AssertionError: If the API or database does not store prices correctly.
"
"passed","Mon Sep 22 07:26:40 UTC 2025","Mon Sep 22 07:26:41 UTC 2025","228","tests.backend.products","test_create_products_negative","","","","test_create_product_invalid_param[invalid regular_price:float]","Test product creation with invalid parameters.

Sends a create product request with invalid parameter values and
verifies that the WooCommerce API returns an appropriate error.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
    param (str): The product parameter being tested (e.g., ""type"", ""sku"").
    value (any): The invalid value to send for the parameter.
"
"passed","Mon Sep 22 07:26:32 UTC 2025","Mon Sep 22 07:26:34 UTC 2025","1273","tests.backend.products","test_create_product_reviews","","","","test_create_product_review[review-lowest boundary]","Test creation and verification of a product review.

Steps:
1. Create a simple product via API.
2. Optionally create a registered customer and order if `customer_bought` is True.
3. Create a product review with the given rating.
4. Verify review exists and is correct via both API and database.

Args:
    setup_teardown (fixture): Fixture providing product helpers, API helpers, and teardown logic.
    rating (int): Rating for the review (0-5 recommended).
    customer_bought (bool): Whether the review is by a registered customer.

Assertions:
    - Review exists in API response with correct rating, status, and reviewer info.
    - Review exists in DB with correct customer_id (if registered), email, and approved status.
"
"passed","Mon Sep 22 07:26:46 UTC 2025","Mon Sep 22 07:26:47 UTC 2025","1388","tests.backend.products","test_create_products_regression","","","","test_invalid_sales_price[very large sale_price == regular_price]","Test that creating a product with sale_price greater than or equal to regular_price
results in the API ignoring the sale_price and setting it to an empty string.

Args:
    setup_teardown (fixture): Fixture providing API helpers.
    regular_price (str): Regular price of the product.
    sale_price (str): Sale price of the product.

Raises:
    AssertionError: If the API or DB does not handle invalid sale_price correctly.
"
"passed","Mon Sep 22 07:25:26 UTC 2025","Mon Sep 22 07:25:26 UTC 2025","220","tests.backend.customers","test_create_customer_smoke","TestCreateCustomer","","","test_create_customer_fail_when_no_password_is_provided","Test API fails when no password is provided.

Verifies:
    - API returns 400
    - Error message specifies missing password

Raises:
    AssertionError: If missing param error is not correctly returned.
"
"skipped","Mon Sep 22 07:26:29 UTC 2025","Mon Sep 22 07:26:30 UTC 2025","751","tests.backend.orders","test_order_refunds","","","","test_order_refund[update to same status]","Test WooCommerce order refunds via API.

Steps:
1. Create a new order with a product.
2. Apply refund based on `refund_type`:
   - full: refund entire order
   - partial: refund half the order
   - refund_1_product: refund a single product
3. Verify that the refund amount returned by the API matches expected value.

Args:
    my_orders_smoke_setup (fixture): Fixture providing product, order, and helper setup.
    refund_type (str): Type of refund to apply. One of ""full"", ""partial"", ""refund_1_product"".

Assertions:
    - Order creation API returns valid responses.
    - Refund API returns the correct refund amount.
"
"passed","Mon Sep 22 07:25:20 UTC 2025","Mon Sep 22 07:25:21 UTC 2025","639","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_with_discount_type[fixed_product]","Test creating a coupon with various valid discount types.

Verifies that the POST API creates the coupon correctly and the GET API
retrieves the coupon with the expected values.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance and coupon IDs list.
    discount_type (str or None): Discount type to test; defaults to 'fixed_cart' if None.

Raises:
    AssertionError: If the POST or GET API responses do not match expected values.
"
"passed","Mon Sep 22 07:25:29 UTC 2025","Mon Sep 22 07:25:31 UTC 2025","2130","tests.backend.orders","test_change_order_status","","","","test_change_order_status[update to completed]","Test changing WooCommerce order status and verifying API and DB consistency.

Steps:
1. Create an order with default status 'processing'.
2. Update the order to the specified `order_status`.
3. Verify the update via the API response.
4. Verify the order exists in the database with the correct updated status.
5. For certain statuses (completed, cancelled, refunded), validate specific fields like
   'needs_payment', 'date_completed', and 'refunds'.

Args:
    my_orders_smoke_setup (fixture): Fixture providing product info, API helpers, and teardown logic.
    order_status (str): The target status to update the order to (e.g., ""completed"", ""refunded"").

Assertions:
    - The order status is correctly updated in the API response.
    - The order ID remains unchanged after update.
    - API and DB responses match for the updated order.
    - Relevant fields (like 'needs_payment' or 'date_completed') are correctly set for specific statuses.
"
"passed","Mon Sep 22 07:25:27 UTC 2025","Mon Sep 22 07:25:29 UTC 2025","1946","tests.backend.orders","test_change_order_status","","","","test_change_order_status[update to on-hold]","Test changing WooCommerce order status and verifying API and DB consistency.

Steps:
1. Create an order with default status 'processing'.
2. Update the order to the specified `order_status`.
3. Verify the update via the API response.
4. Verify the order exists in the database with the correct updated status.
5. For certain statuses (completed, cancelled, refunded), validate specific fields like
   'needs_payment', 'date_completed', and 'refunds'.

Args:
    my_orders_smoke_setup (fixture): Fixture providing product info, API helpers, and teardown logic.
    order_status (str): The target status to update the order to (e.g., ""completed"", ""refunded"").

Assertions:
    - The order status is correctly updated in the API response.
    - The order ID remains unchanged after update.
    - API and DB responses match for the updated order.
    - Relevant fields (like 'needs_payment' or 'date_completed') are correctly set for specific statuses.
"
"passed","Mon Sep 22 07:26:23 UTC 2025","Mon Sep 22 07:26:23 UTC 2025","319","tests.backend.orders","test_create_order_smoke","","","","test_create_order_no_payment_info","Verify order creation with missing billing, shipping, and payment data.

Ensures the API still creates an order when critical fields are empty and
sets the correct flags and status.

Args:
    my_orders_smoke_setup (dict): Fixture with product info, API helpers,
        and order tracking.

Asserts:
    - Response is not empty.
    - Order ID is generated and tracked for teardown.
    - `needs_processing` is True.
    - `needs_payment` is True.
    - Status equals ""pending"".
"
"skipped","Mon Sep 22 07:26:35 UTC 2025","Mon Sep 22 07:26:36 UTC 2025","823","tests.backend.products","test_create_product_reviews","","","","test_create_product_review[review-out of range]","Test creation and verification of a product review.

Steps:
1. Create a simple product via API.
2. Optionally create a registered customer and order if `customer_bought` is True.
3. Create a product review with the given rating.
4. Verify review exists and is correct via both API and database.

Args:
    setup_teardown (fixture): Fixture providing product helpers, API helpers, and teardown logic.
    rating (int): Rating for the review (0-5 recommended).
    customer_bought (bool): Whether the review is by a registered customer.

Assertions:
    - Review exists in API response with correct rating, status, and reviewer info.
    - Review exists in DB with correct customer_id (if registered), email, and approved status.
"
"passed","Mon Sep 22 07:26:41 UTC 2025","Mon Sep 22 07:26:41 UTC 2025","211","tests.backend.products","test_create_products_negative","","","","test_create_product_invalid_param[invalid regular_price:int]","Test product creation with invalid parameters.

Sends a create product request with invalid parameter values and
verifies that the WooCommerce API returns an appropriate error.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
    param (str): The product parameter being tested (e.g., ""type"", ""sku"").
    value (any): The invalid value to send for the parameter.
"
"passed","Mon Sep 22 07:27:02 UTC 2025","Mon Sep 22 07:27:03 UTC 2025","1378","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_simple_virtual_product1]",""
"passed","Mon Sep 22 07:26:43 UTC 2025","Mon Sep 22 07:26:44 UTC 2025","1365","tests.backend.products","test_create_products_regression","","","","test_invalid_sales_price[sale_price > regular_price]","Test that creating a product with sale_price greater than or equal to regular_price
results in the API ignoring the sale_price and setting it to an empty string.

Args:
    setup_teardown (fixture): Fixture providing API helpers.
    regular_price (str): Regular price of the product.
    sale_price (str): Sale price of the product.

Raises:
    AssertionError: If the API or DB does not handle invalid sale_price correctly.
"
"passed","Mon Sep 22 07:26:44 UTC 2025","Mon Sep 22 07:26:46 UTC 2025","1360","tests.backend.products","test_create_products_regression","","","","test_invalid_sales_price[sale_price == regular_price]","Test that creating a product with sale_price greater than or equal to regular_price
results in the API ignoring the sale_price and setting it to an empty string.

Args:
    setup_teardown (fixture): Fixture providing API helpers.
    regular_price (str): Regular price of the product.
    sale_price (str): Sale price of the product.

Raises:
    AssertionError: If the API or DB does not handle invalid sale_price correctly.
"
"passed","Mon Sep 22 07:27:05 UTC 2025","Mon Sep 22 07:27:06 UTC 2025","1390","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_grouped_product]",""
"passed","Mon Sep 22 07:25:22 UTC 2025","Mon Sep 22 07:25:22 UTC 2025","276","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_invalid_discount_type","Negative test: Verify invalid discount type returns an error.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance.

Raises:
    AssertionError: If the API response does not match the expected error response.
"
"passed","Mon Sep 22 07:26:02 UTC 2025","Mon Sep 22 07:26:08 UTC 2025","5492","tests.backend.orders","test_create_order_smoke","","","","test_create_order[guestuser_5_ord_1_prod]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Mon Sep 22 07:25:15 UTC 2025","Mon Sep 22 07:25:17 UTC 2025","1950","tests.backend.coupons","test_apply_coupons","","","","test_apply_coupon_twice_neg","Verify that applying the same coupon twice to one order does not change the discount or order total.

Args:
    apply_coupon_setup (dict): Fixture with DAOs, API helpers, and test data.

Asserts:
    - Order ID remains the same.
    - Discount and total do not change after second application.
    - Coupon code is identical for both applications.
"
"passed","Mon Sep 22 07:27:03 UTC 2025","Mon Sep 22 07:27:05 UTC 2025","1406","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_simple_virtual_product2]",""
"passed","Mon Sep 22 07:26:40 UTC 2025","Mon Sep 22 07:26:40 UTC 2025","220","tests.backend.products","test_create_products_negative","","","","test_create_product_invalid_param[invalid product sku:int]","Test product creation with invalid parameters.

Sends a create product request with invalid parameter values and
verifies that the WooCommerce API returns an appropriate error.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
    param (str): The product parameter being tested (e.g., ""type"", ""sku"").
    value (any): The invalid value to send for the parameter.
"
"passed","Mon Sep 22 07:27:11 UTC 2025","Mon Sep 22 07:27:11 UTC 2025","387","tests.backend.products","test_get_products_smoke","","","","test_get_all_products_returns_not_empty",""
"passed","Mon Sep 22 07:25:23 UTC 2025","Mon Sep 22 07:25:24 UTC 2025","750","tests.backend.customers","test_create_customer_smoke","TestCreateCustomer","","","test_create_customer_only_email_password","Test customer creation using only email and password.

Verifies:
    - HTTP 201 response from API
    - Valid response fields such as ID and role
    - Customer is stored correctly in the database

Raises:
    AssertionError: If any of the API or DB validations fail.
"
"passed","Mon Sep 22 07:25:08 UTC 2025","Mon Sep 22 07:25:11 UTC 2025","2776","tests.backend.coupons","test_apply_coupons","","","","test_apply_coupon_to_new_order[apply_'fixed_product'_coupon]","Test applying a coupon to a newly created order.

This test:
1. Creates a new order for a random or fixed product.
2. Retrieves or creates a coupon depending on the discount type.
3. Applies the coupon to the order via API.
4. Verifies that the order total and discount are correct.
5. Checks that the customer is listed as having used the coupon.

Args:
    apply_coupon_setup (dict): Fixture providing setup info and helpers.
    discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).

Asserts:
    - Order total before and after applying coupon.
    - Discount applied matches expected.
    - Coupon is valid and published.
    - Customer is correctly listed as a coupon user.
"
"skipped","Mon Sep 22 07:26:30 UTC 2025","Mon Sep 22 07:26:31 UTC 2025","751","tests.backend.orders","test_order_refunds","","","","test_order_refund[update to empty string]","Test WooCommerce order refunds via API.

Steps:
1. Create a new order with a product.
2. Apply refund based on `refund_type`:
   - full: refund entire order
   - partial: refund half the order
   - refund_1_product: refund a single product
3. Verify that the refund amount returned by the API matches expected value.

Args:
    my_orders_smoke_setup (fixture): Fixture providing product, order, and helper setup.
    refund_type (str): Type of refund to apply. One of ""full"", ""partial"", ""refund_1_product"".

Assertions:
    - Order creation API returns valid responses.
    - Refund API returns the correct refund amount.
"
"passed","Mon Sep 22 07:27:08 UTC 2025","Mon Sep 22 07:27:09 UTC 2025","983","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_variable_product]",""
"passed","Mon Sep 22 07:26:01 UTC 2025","Mon Sep 22 07:26:02 UTC 2025","1125","tests.backend.orders","test_create_order_smoke","","","","test_create_order[guestuser_1_ord_5_prods]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Mon Sep 22 07:25:52 UTC 2025","Mon Sep 22 07:25:59 UTC 2025","7412","tests.backend.orders","test_create_order_notes","","","","test_create_order_note[reg_user_5_notes]","Test creating one or multiple order notes for a given user type.

Args:
    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.
    user_type (str): 'guest_user' or 'registered_user'.
    quantity (int): Number of notes to create.
"
"passed","Mon Sep 22 07:27:11 UTC 2025","Mon Sep 22 07:27:12 UTC 2025","630","tests.backend.products","test_get_products_smoke","","","","test_get_product_by_id",""
"passed","Mon Sep 22 07:26:39 UTC 2025","Mon Sep 22 07:26:40 UTC 2025","220","tests.backend.products","test_create_products_negative","","","","test_create_product_invalid_param[invalid product type:str]","Test product creation with invalid parameters.

Sends a create product request with invalid parameter values and
verifies that the WooCommerce API returns an appropriate error.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
    param (str): The product parameter being tested (e.g., ""type"", ""sku"").
    value (any): The invalid value to send for the parameter.
"
"passed","Mon Sep 22 07:26:36 UTC 2025","Mon Sep 22 07:26:38 UTC 2025","2394","tests.backend.products","test_create_product_reviews","","","","test_create_product_review[registered customer review]","Test creation and verification of a product review.

Steps:
1. Create a simple product via API.
2. Optionally create a registered customer and order if `customer_bought` is True.
3. Create a product review with the given rating.
4. Verify review exists and is correct via both API and database.

Args:
    setup_teardown (fixture): Fixture providing product helpers, API helpers, and teardown logic.
    rating (int): Rating for the review (0-5 recommended).
    customer_bought (bool): Whether the review is by a registered customer.

Assertions:
    - Review exists in API response with correct rating, status, and reviewer info.
    - Review exists in DB with correct customer_id (if registered), email, and approved status.
"
"passed","Mon Sep 22 07:26:08 UTC 2025","Mon Sep 22 07:26:09 UTC 2025","1131","tests.backend.orders","test_create_order_smoke","","","","test_create_order[guestuser_1_ord_1_prod]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Mon Sep 22 07:25:31 UTC 2025","Mon Sep 22 07:25:33 UTC 2025","1986","tests.backend.orders","test_change_order_status","","","","test_change_order_status[update to cancelled]","Test changing WooCommerce order status and verifying API and DB consistency.

Steps:
1. Create an order with default status 'processing'.
2. Update the order to the specified `order_status`.
3. Verify the update via the API response.
4. Verify the order exists in the database with the correct updated status.
5. For certain statuses (completed, cancelled, refunded), validate specific fields like
   'needs_payment', 'date_completed', and 'refunds'.

Args:
    my_orders_smoke_setup (fixture): Fixture providing product info, API helpers, and teardown logic.
    order_status (str): The target status to update the order to (e.g., ""completed"", ""refunded"").

Assertions:
    - The order status is correctly updated in the API response.
    - The order ID remains unchanged after update.
    - API and DB responses match for the updated order.
    - Relevant fields (like 'needs_payment' or 'date_completed') are correctly set for specific statuses.
"
"passed","Mon Sep 22 07:25:25 UTC 2025","Mon Sep 22 07:25:25 UTC 2025","247","tests.backend.customers","test_create_customer_smoke","TestCreateCustomer","","","test_create_customer_fail_for_existing_email","Test API fails when trying to create a customer with an existing email.

Verifies:
    - API returns 400
    - Appropriate error code and message are returned

Raises:
    AssertionError: If API response doesn't contain expected error code/message.
"
"skipped","Mon Sep 22 07:26:41 UTC 2025","Mon Sep 22 07:26:41 UTC 2025","335","tests.backend.products","test_create_products_negative","","","","test_create_product_invalid_param[invalid regular_price:negative]","Test product creation with invalid parameters.

Sends a create product request with invalid parameter values and
verifies that the WooCommerce API returns an appropriate error.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
    param (str): The product parameter being tested (e.g., ""type"", ""sku"").
    value (any): The invalid value to send for the parameter.
"
"passed","Mon Sep 22 07:26:59 UTC 2025","Mon Sep 22 07:27:01 UTC 2025","1368","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_simple_product]",""
"passed","Mon Sep 22 07:25:33 UTC 2025","Mon Sep 22 07:25:35 UTC 2025","2142","tests.backend.orders","test_change_order_status","","","","test_change_order_status[update to refunded]","Test changing WooCommerce order status and verifying API and DB consistency.

Steps:
1. Create an order with default status 'processing'.
2. Update the order to the specified `order_status`.
3. Verify the update via the API response.
4. Verify the order exists in the database with the correct updated status.
5. For certain statuses (completed, cancelled, refunded), validate specific fields like
   'needs_payment', 'date_completed', and 'refunds'.

Args:
    my_orders_smoke_setup (fixture): Fixture providing product info, API helpers, and teardown logic.
    order_status (str): The target status to update the order to (e.g., ""completed"", ""refunded"").

Assertions:
    - The order status is correctly updated in the API response.
    - The order ID remains unchanged after update.
    - API and DB responses match for the updated order.
    - Relevant fields (like 'needs_payment' or 'date_completed') are correctly set for specific statuses.
"
"passed","Mon Sep 22 07:25:37 UTC 2025","Mon Sep 22 07:25:39 UTC 2025","2075","tests.backend.orders","test_change_order_status","","","","test_change_order_status[update to same status]","Test changing WooCommerce order status and verifying API and DB consistency.

Steps:
1. Create an order with default status 'processing'.
2. Update the order to the specified `order_status`.
3. Verify the update via the API response.
4. Verify the order exists in the database with the correct updated status.
5. For certain statuses (completed, cancelled, refunded), validate specific fields like
   'needs_payment', 'date_completed', and 'refunds'.

Args:
    my_orders_smoke_setup (fixture): Fixture providing product info, API helpers, and teardown logic.
    order_status (str): The target status to update the order to (e.g., ""completed"", ""refunded"").

Assertions:
    - The order status is correctly updated in the API response.
    - The order ID remains unchanged after update.
    - API and DB responses match for the updated order.
    - Relevant fields (like 'needs_payment' or 'date_completed') are correctly set for specific statuses.
"
"passed","Mon Sep 22 07:26:42 UTC 2025","Mon Sep 22 07:26:43 UTC 2025","954","tests.backend.products","test_create_products_negative","","","","test_create_empty_product_neg","Test creating a product with an empty payload.

Verifies that WooCommerce creates a product with default values when
no fields are provided. Also checks that the product exists in the API
and the database.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
"
"passed","Mon Sep 22 07:26:47 UTC 2025","Mon Sep 22 07:26:49 UTC 2025","1552","tests.backend.products","test_create_products_regression","","","","test_invalid_sales_price[very large sale_price > regular_price]","Test that creating a product with sale_price greater than or equal to regular_price
results in the API ignoring the sale_price and setting it to an empty string.

Args:
    setup_teardown (fixture): Fixture providing API helpers.
    regular_price (str): Regular price of the product.
    sale_price (str): Sale price of the product.

Raises:
    AssertionError: If the API or DB does not handle invalid sale_price correctly.
"
"passed","Mon Sep 22 07:26:51 UTC 2025","Mon Sep 22 07:26:53 UTC 2025","1411","tests.backend.products","test_create_products_regression","","","","test_price_boundaries[very large price and sale price]","Test creating a product with valid sale_price within acceptable boundaries.

This test verifies that when a product is created with a sale_price that is
less than the regular_price, the API stores the correct values for both
regular_price and sale_price, and the product is properly recorded in the DB.

Args:
    setup_teardown (fixture): Fixture providing API and database helpers.
    regular_price (str): Regular price to use when creating the product.
    sale_price (str): Sale price to use when creating the product.

Raises:
    AssertionError: If the API or database does not store prices correctly.
"
"passed","Mon Sep 22 07:26:40 UTC 2025","Mon Sep 22 07:26:40 UTC 2025","242","tests.backend.products","test_create_products_negative","","","","test_create_product_invalid_param[invalid product type:int]","Test product creation with invalid parameters.

Sends a create product request with invalid parameter values and
verifies that the WooCommerce API returns an appropriate error.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
    param (str): The product parameter being tested (e.g., ""type"", ""sku"").
    value (any): The invalid value to send for the parameter.
"
"passed","Mon Sep 22 07:26:41 UTC 2025","Mon Sep 22 07:26:41 UTC 2025","224","tests.backend.products","test_create_products_negative","","","","test_create_product_invalid_param[invalid stock_quantity: rand str]","Test product creation with invalid parameters.

Sends a create product request with invalid parameter values and
verifies that the WooCommerce API returns an appropriate error.

Args:
    setup_teardown (dict): Fixture providing helpers for API and DB access.
    param (str): The product parameter being tested (e.g., ""type"", ""sku"").
    value (any): The invalid value to send for the parameter.
"
"passed","Mon Sep 22 07:25:11 UTC 2025","Mon Sep 22 07:25:14 UTC 2025","3042","tests.backend.coupons","test_apply_coupons","","","","test_apply_coupon_to_new_order[apply_free_coupon]","Test applying a coupon to a newly created order.

This test:
1. Creates a new order for a random or fixed product.
2. Retrieves or creates a coupon depending on the discount type.
3. Applies the coupon to the order via API.
4. Verifies that the order total and discount are correct.
5. Checks that the customer is listed as having used the coupon.

Args:
    apply_coupon_setup (dict): Fixture providing setup info and helpers.
    discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).

Asserts:
    - Order total before and after applying coupon.
    - Discount applied matches expected.
    - Coupon is valid and published.
    - Customer is correctly listed as a coupon user.
"
"passed","Mon Sep 22 07:26:09 UTC 2025","Mon Sep 22 07:26:10 UTC 2025","1733","tests.backend.orders","test_create_order_smoke","","","","test_create_order[reg_user_1_ord_5_prods]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Mon Sep 22 07:25:20 UTC 2025","Mon Sep 22 07:25:20 UTC 2025","493","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_with_discount_type[fixed_cart]","Test creating a coupon with various valid discount types.

Verifies that the POST API creates the coupon correctly and the GET API
retrieves the coupon with the expected values.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance and coupon IDs list.
    discount_type (str or None): Discount type to test; defaults to 'fixed_cart' if None.

Raises:
    AssertionError: If the POST or GET API responses do not match expected values.
"
"passed","Mon Sep 22 07:25:05 UTC 2025","Mon Sep 22 07:25:08 UTC 2025","3110","tests.backend.coupons","test_apply_coupons","","","","test_apply_coupon_to_new_order[apply_'fixed_cart'_coupon]","Test applying a coupon to a newly created order.

This test:
1. Creates a new order for a random or fixed product.
2. Retrieves or creates a coupon depending on the discount type.
3. Applies the coupon to the order via API.
4. Verifies that the order total and discount are correct.
5. Checks that the customer is listed as having used the coupon.

Args:
    apply_coupon_setup (dict): Fixture providing setup info and helpers.
    discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).

Asserts:
    - Order total before and after applying coupon.
    - Discount applied matches expected.
    - Coupon is valid and published.
    - Customer is correctly listed as a coupon user.
"
"passed","Mon Sep 22 07:25:41 UTC 2025","Mon Sep 22 07:25:43 UTC 2025","1993","tests.backend.orders","test_create_order_notes","","","","test_create_order_note[guestuser_1_note]","Test creating one or multiple order notes for a given user type.

Args:
    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.
    user_type (str): 'guest_user' or 'registered_user'.
    quantity (int): Number of notes to create.
"
"passed","Mon Sep 22 07:25:29 UTC 2025","Mon Sep 22 07:25:33 UTC 2025","3610","tests.frontend.components","test_free_shipping_banner","TestFreeShippingBanner","","","test_verify_free_shipping_banner_not_displayed_in_my_account_page",""
"passed","Mon Sep 22 07:25:27 UTC 2025","Mon Sep 22 07:25:29 UTC 2025","2174","tests.frontend.components","test_free_shipping_banner","TestFreeShippingBanner","","","test_verify_free_shipping_banner_displayed_in_checkout_page",""
"passed","Mon Sep 22 07:25:25 UTC 2025","Mon Sep 22 07:25:26 UTC 2025","939","tests.frontend.components","test_free_shipping_banner","TestFreeShippingBanner","","","test_verify_free_shipping_banner_displayed_in_home_page",""
"passed","Mon Sep 22 07:25:26 UTC 2025","Mon Sep 22 07:25:27 UTC 2025","528","tests.frontend.components","test_free_shipping_banner","TestFreeShippingBanner","","","test_verify_free_shipping_banner_displayed_in_cart_page",""
"passed","Mon Sep 22 07:25:47 UTC 2025","Mon Sep 22 07:25:47 UTC 2025","154","tests.frontend.home_page","test_home_page_smoke","TestHomePageSmoke","","","test_verify_number_of_products_displayed",""
"passed","Mon Sep 22 07:25:47 UTC 2025","Mon Sep 22 07:25:47 UTC 2025","34","tests.frontend.home_page","test_home_page_smoke","TestHomePageSmoke","","","test_verify_heading_is_displayed",""
"passed","Mon Sep 22 07:25:47 UTC 2025","Mon Sep 22 07:25:47 UTC 2025","98","tests.frontend.home_page","test_home_page_smoke","TestHomePageSmoke","","","test_verify_header_menu_is_displayed",""
"passed","Mon Sep 22 07:25:33 UTC 2025","Mon Sep 22 07:25:46 UTC 2025","12710","tests.frontend.end_to_end","test_end_to_end_checkout_guest_user","TestEndToEndCheckoutGuestUser","","","test_end_to_end_checkout_guest_user",""
"passed","Mon Sep 22 07:25:52 UTC 2025","Mon Sep 22 07:25:55 UTC 2025","2738","tests.frontend.my_account","test_register_new_user","TestRegisterNewUser","","","test_register_valid_new_user","
Test to verify a valid user can register to the site.
It generates a random email and password, then registers the user.
:return:
"
"passed","Mon Sep 22 07:25:58 UTC 2025","Mon Sep 22 07:25:59 UTC 2025","20","tests.frontend.product_description_page","test_pdp_variable_product","TestProductDescriptionPageVariableProduct","","","test_verify_main_image_variable_prod","Verify that the main product image on the frontend matches the one returned by the API.

This test fetches the displayed product image URL from the frontend and compares it
against a list of image URLs retrieved from the API. It also checks that the displayed
URL is valid (i.e., starts with 'http' and ends with '.jpg').

Args:
    setup: A pytest fixture that sets up the browser and test environment.

Raises:
    AssertionError: If the image URL is invalid or does not match any from the API.
"
"passed","Mon Sep 22 07:25:48 UTC 2025","Mon Sep 22 07:25:50 UTC 2025","2496","tests.frontend.my_account","test_login_negative","TestLoginNegative","","","test_login_none_existing_user",""
"passed","Mon Sep 22 07:25:58 UTC 2025","Mon Sep 22 07:25:58 UTC 2025","63","tests.frontend.product_description_page","test_pdp_variable_product","TestProductDescriptionPageVariableProduct","","","test_verify_product_name_displayed_variable_product","Verify that the product name (h1 header) is correctly displayed for a variable product.

This test checks that the displayed product name on the frontend matches the expected value
for a known variable product. The product is hardcoded to keep the test frontend-only.

Args:
    setup: A pytest fixture that sets up the test environment and necessary page objects.

Raises:
    AssertionError: If the displayed product name does not match the expected name.
"
"passed","Mon Sep 22 07:25:59 UTC 2025","Mon Sep 22 07:25:59 UTC 2025","65","tests.frontend.product_description_page","test_pdp_variable_product","TestProductDescriptionPageVariableProduct","","","test_verify_alternate_images_variable_prod","Verify that all alternate product images on the frontend match the API response.

This test retrieves all alternate product image URLs displayed on the frontend
and compares them to the image URLs returned by the WooCommerce API.

The comparison ignores the order of images but requires exact URL matches.

Args:
    setup: A pytest fixture that initializes the test environment and page objects.

Raises:
    AssertionError: If the displayed alternate image URLs do not match the API URLs.
"
