{"uid":"33dbe452906c0fe2","name":"test_create_empty_product_neg","fullName":"tests.backend.products.test_create_products_negative#test_create_empty_product_neg","historyId":"57011615c0d6be0e4a075a36626c95b5","time":{"start":1756683663162,"stop":1756683664244,"duration":1082},"description":"Test creating a product with an empty payload.\n\nVerifies that WooCommerce creates a product with default values when\nno fields are provided. Also checks that the product exists in the API\nand the database.\n\nArgs:\n    setup_teardown (dict): Fixture providing helpers for API and DB access.\n","descriptionHtml":"<p>Test creating a product with an empty payload.</p>\n<p>Verifies that WooCommerce creates a product with default values when<br />\nno fields are provided. Also checks that the product exists in the API<br />\nand the database.</p>\n<p>Args:<br />\nsetup_teardown (dict): Fixture providing helpers for API and DB access.</p>\n","status":"failed","statusMessage":"AssertionError: Create a simple product has unexpected name in database.Expected: Product, Actual: product-19","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7f19d5ad6fd0>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7f19d585bce0>}\n\n    @pytest.mark.create_prod_neg\n    def test_create_empty_product_neg(setup_teardown):\n        \"\"\"Test creating a product with an empty payload.\n    \n        Verifies that WooCommerce creates a product with default values when\n        no fields are provided. Also checks that the product exists in the API\n        and the database.\n    \n        Args:\n            setup_teardown (dict): Fixture providing helpers for API and DB access.\n        \"\"\"\n        response = setup_teardown['products_api_helper'].call_create_product(payload={})\n        assert response, (\"Create product with empty payload returned empty response. Woocommerce api has no mandatory fields for creating a product.\"\n                          \"Expected status code: 201\")\n        prod_id = response['id']\n        setup_teardown['product_ids'].append(prod_id) # for teardown\n    \n        # assert default values are assigned to product\n        assert response[\"type\"] == \"simple\", (f\"Create product with empty payload returned wrong product type.\"\n                                              f\"Default product type: 'simple'. Actual: {response['type']} \")\n        assert response[\"name\"] == \"Product\", (f\"Create product with empty payload returned wrong product name.\"\n                                              f\"Default product name: 'Product'. Actual: {response['name']} \")\n    \n        # verify product exists via api and in db\n>       assert setup_teardown['generic_products_helper'].verify_product_is_created(response)\n\ntests/backend/products/test_create_products_negative.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper object at 0x7f19d57017f0>\npost_response = {'_links': {'collection': [{'href': 'http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/products'}], 'self': [{'href...ow': ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']}}]}, 'attributes': [], 'average_rating': '0', 'backordered': False, ...}\n\n    def verify_product_is_created(self, post_response):\n        \"\"\"Verify that a product exists in the API and database.\n    \n        Args:\n            post_response (dict): Response from create_product_by_type.\n    \n        Raises:\n            AssertionError: If the product is missing or fields mismatch.\n        \"\"\"\n        # POST api call assertions\n        assert post_response, \"Create product POST api call is empty.\"\n    \n        assert post_response['status'] == 'publish', (f\"Create a simple product POST api call response\"\n                                                       f\"returned unexpected 'status'\"\n                                                       f\"Expected: 'publish', Actual: {post_response['status']}\")\n    \n        # make GET api call to verify product exists\n        product_type = post_response['type']\n        product_id = post_response['id']\n        product_name = post_response['name']\n        get_response = self.products_api_helper.call_get_product_by_id(product_id)\n    \n        # GET api call assertion\n        assert get_response, f\"Create a {product_type} product GET api call is empty.\"\n    \n        assert get_response['id'] == product_id, (f\"Create a {product_type} product GET api call response\"\n                                                       f\"returned wrong product id\"\n                                                       f\"Expected: {product_id}, Actual: {get_response['id']}\")\n    \n        assert get_response['type'] == product_type, (f\"Create a {product_type} product GET api call response\"\n                                                       f\"returned unexpected 'product_type'\"\n                                                       f\"Expected: {product_type}, Actual: {get_response['product_type']}\")\n        assert get_response['name'] == product_name, (f\"Create a {product_type} product GET api call response\"\n                                                       f\"returned wrong product name\"\n                                                       f\"Expected: {product_name}, Actual: {get_response['name']}\")\n        assert get_response['status'] == 'publish', (f\"Create a {product_type} product GET api call response\"\n                                                       f\"returned unexpected 'status'\"\n                                                       f\"Expected: 'publish', Actual: {get_response['status']}\")\n    \n        if get_response['virtual'] or get_response['downloadable']:\n            assert product_type == \"simple\", f\"Virtual or Downloadable products must be of type 'simple'. Actual: {product_type}\"\n    \n        elif product_type == \"external\":\n            assert get_response[\"button_text\"] == post_response[\"button_text\"]\n            assert get_response[\"external_url\"] == post_response[\"external_url\"]\n    \n        elif product_type == \"grouped\":\n            assert get_response['grouped_products'] and len(get_response['grouped_products']) > 1, (f\"Grouped products must be present and have more than one ids.\"\n                                                   f\"Actual number of product ids: {len(get_response['ids'])}\")\n    \n        elif product_type == \"variable\":\n            assert get_response[\"attributes\"], f\"Error. Get variable product response returned empty list for 'attributes'.\"\n            assert get_response[\"attributes\"] == get_response[\"attributes\"], (f\"Create variable product post and get call 'attributes' field are not the same.\"\n                                                                              f\"POST: {post_response['attributes']}, GET: {get_response['attributes']} \")\n    \n    \n        logger.info(f\"Successfully found product with id: {product_id} via api GET call\")\n    \n        # verify product is in the database\n        db_product = self.products_dao.get_product_by_id(product_id)\n    \n        # DB assertions\n        assert db_product, f\"Create a {product_type} product POST api call not recorded in database.\"\n>       assert db_product[0]['post_name'] == product_name.lower(), (f\"Create a {product_type} product has unexpected name in database.\"\n                                                            f\"Expected: {product_name}, Actual: {db_product[0]['post_name']}\")\nE       AssertionError: Create a simple product has unexpected name in database.Expected: Product, Actual: product-19\n\nsrc/generic_helpers/generic_products_helper.py:155: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_teardown","time":{"start":1756683659692,"stop":1756683659692,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test creating a product with an empty payload.\n\nVerifies that WooCommerce creates a product with default values when\nno fields are provided. Also checks that the product exists in the API\nand the database.\n\nArgs:\n    setup_teardown (dict): Fixture providing helpers for API and DB access.\n","status":"failed","statusMessage":"AssertionError: Create a simple product has unexpected name in database.Expected: Product, Actual: product-19","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7f19d5ad6fd0>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7f19d585bce0>}\n\n    @pytest.mark.create_prod_neg\n    def test_create_empty_product_neg(setup_teardown):\n        \"\"\"Test creating a product with an empty payload.\n    \n        Verifies that WooCommerce creates a product with default values when\n        no fields are provided. Also checks that the product exists in the API\n        and the database.\n    \n        Args:\n            setup_teardown (dict): Fixture providing helpers for API and DB access.\n        \"\"\"\n        response = setup_teardown['products_api_helper'].call_create_product(payload={})\n        assert response, (\"Create product with empty payload returned empty response. Woocommerce api has no mandatory fields for creating a product.\"\n                          \"Expected status code: 201\")\n        prod_id = response['id']\n        setup_teardown['product_ids'].append(prod_id) # for teardown\n    \n        # assert default values are assigned to product\n        assert response[\"type\"] == \"simple\", (f\"Create product with empty payload returned wrong product type.\"\n                                              f\"Default product type: 'simple'. Actual: {response['type']} \")\n        assert response[\"name\"] == \"Product\", (f\"Create product with empty payload returned wrong product name.\"\n                                              f\"Default product name: 'Product'. Actual: {response['name']} \")\n    \n        # verify product exists via api and in db\n>       assert setup_teardown['generic_products_helper'].verify_product_is_created(response)\n\ntests/backend/products/test_create_products_negative.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper object at 0x7f19d57017f0>\npost_response = {'_links': {'collection': [{'href': 'http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/products'}], 'self': [{'href...ow': ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']}}]}, 'attributes': [], 'average_rating': '0', 'backordered': False, ...}\n\n    def verify_product_is_created(self, post_response):\n        \"\"\"Verify that a product exists in the API and database.\n    \n        Args:\n            post_response (dict): Response from create_product_by_type.\n    \n        Raises:\n            AssertionError: If the product is missing or fields mismatch.\n        \"\"\"\n        # POST api call assertions\n        assert post_response, \"Create product POST api call is empty.\"\n    \n        assert post_response['status'] == 'publish', (f\"Create a simple product POST api call response\"\n                                                       f\"returned unexpected 'status'\"\n                                                       f\"Expected: 'publish', Actual: {post_response['status']}\")\n    \n        # make GET api call to verify product exists\n        product_type = post_response['type']\n        product_id = post_response['id']\n        product_name = post_response['name']\n        get_response = self.products_api_helper.call_get_product_by_id(product_id)\n    \n        # GET api call assertion\n        assert get_response, f\"Create a {product_type} product GET api call is empty.\"\n    \n        assert get_response['id'] == product_id, (f\"Create a {product_type} product GET api call response\"\n                                                       f\"returned wrong product id\"\n                                                       f\"Expected: {product_id}, Actual: {get_response['id']}\")\n    \n        assert get_response['type'] == product_type, (f\"Create a {product_type} product GET api call response\"\n                                                       f\"returned unexpected 'product_type'\"\n                                                       f\"Expected: {product_type}, Actual: {get_response['product_type']}\")\n        assert get_response['name'] == product_name, (f\"Create a {product_type} product GET api call response\"\n                                                       f\"returned wrong product name\"\n                                                       f\"Expected: {product_name}, Actual: {get_response['name']}\")\n        assert get_response['status'] == 'publish', (f\"Create a {product_type} product GET api call response\"\n                                                       f\"returned unexpected 'status'\"\n                                                       f\"Expected: 'publish', Actual: {get_response['status']}\")\n    \n        if get_response['virtual'] or get_response['downloadable']:\n            assert product_type == \"simple\", f\"Virtual or Downloadable products must be of type 'simple'. Actual: {product_type}\"\n    \n        elif product_type == \"external\":\n            assert get_response[\"button_text\"] == post_response[\"button_text\"]\n            assert get_response[\"external_url\"] == post_response[\"external_url\"]\n    \n        elif product_type == \"grouped\":\n            assert get_response['grouped_products'] and len(get_response['grouped_products']) > 1, (f\"Grouped products must be present and have more than one ids.\"\n                                                   f\"Actual number of product ids: {len(get_response['ids'])}\")\n    \n        elif product_type == \"variable\":\n            assert get_response[\"attributes\"], f\"Error. Get variable product response returned empty list for 'attributes'.\"\n            assert get_response[\"attributes\"] == get_response[\"attributes\"], (f\"Create variable product post and get call 'attributes' field are not the same.\"\n                                                                              f\"POST: {post_response['attributes']}, GET: {get_response['attributes']} \")\n    \n    \n        logger.info(f\"Successfully found product with id: {product_id} via api GET call\")\n    \n        # verify product is in the database\n        db_product = self.products_dao.get_product_by_id(product_id)\n    \n        # DB assertions\n        assert db_product, f\"Create a {product_type} product POST api call not recorded in database.\"\n>       assert db_product[0]['post_name'] == product_name.lower(), (f\"Create a {product_type} product has unexpected name in database.\"\n                                                            f\"Expected: {product_name}, Actual: {db_product[0]['post_name']}\")\nE       AssertionError: Create a simple product has unexpected name in database.Expected: Product, Actual: product-19\n\nsrc/generic_helpers/generic_products_helper.py:155: AssertionError","steps":[],"attachments":[{"uid":"1b0fbedef58ff998","name":"log","source":"1b0fbedef58ff998.txt","type":"text/plain","size":237}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup_teardown::0","time":{"start":1756683664250,"stop":1756683664599,"duration":349},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"create_prod_neg"},{"name":"parentSuite","value":"tests.backend.products"},{"name":"suite","value":"test_create_products_negative"},{"name":"host","value":"pkrvmccyg1gnepe"},{"name":"thread","value":"2090-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.products.test_create_products_negative"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["create_prod_neg"]},"source":"33dbe452906c0fe2.json","parameterValues":[]}