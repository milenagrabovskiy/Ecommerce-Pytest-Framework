{"uid":"d73e31464bfaa95d","name":"test_create_empty_product_neg","fullName":"tests.backend.products.test_create_products_negative#test_create_empty_product_neg","historyId":"57011615c0d6be0e4a075a36626c95b5","time":{"start":1757834398403,"stop":1757834399082,"duration":679},"description":"Test creating a product with an empty payload.\n\nVerifies that WooCommerce creates a product with default values when\nno fields are provided. Also checks that the product exists in the API\nand the database.\n\nArgs:\n    setup_teardown (dict): Fixture providing helpers for API and DB access.\n","descriptionHtml":"<p>Test creating a product with an empty payload.</p>\n<p>Verifies that WooCommerce creates a product with default values when<br />\nno fields are provided. Also checks that the product exists in the API<br />\nand the database.</p>\n<p>Args:<br />\nsetup_teardown (dict): Fixture providing helpers for API and DB access.</p>\n","status":"broken","statusMessage":"RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7f8d1d6e2990>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7f8d1d614510>}\n\n    @pytest.mark.ebe44\n    def test_create_empty_product_neg(setup_teardown):\n        \"\"\"Test creating a product with an empty payload.\n    \n        Verifies that WooCommerce creates a product with default values when\n        no fields are provided. Also checks that the product exists in the API\n        and the database.\n    \n        Args:\n            setup_teardown (dict): Fixture providing helpers for API and DB access.\n        \"\"\"\n        response = setup_teardown['products_api_helper'].call_create_product(payload={})\n        assert response, (\"Create product with empty payload returned empty response. Woocommerce api has no mandatory fields for creating a product.\"\n                          \"Expected status code: 201\")\n        prod_id = response['id']\n        setup_teardown['product_ids'].append(prod_id) # for teardown\n    \n        # assert default values are assigned to product\n        assert response[\"type\"] == \"simple\", (f\"Create product with empty payload returned wrong product type.\"\n                                              f\"Default product type: 'simple'. Actual: {response['type']} \")\n        assert response[\"name\"] == \"Product\", (f\"Create product with empty payload returned wrong product name.\"\n                                              f\"Default product name: 'Product'. Actual: {response['name']} \")\n    \n        # verify product exists via api and in db\n>       setup_teardown['generic_products_helper'].verify_product_is_created(response)\n\ntests/backend/products/test_create_products_negative.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_products_helper.py:151: in verify_product_is_created\n    db_product = self.products_dao.get_product_by_id(product_id)\nsrc/dao/products_dao.py:60: in get_product_by_id\n    return self.db_helper.execute_select(sql)\nsrc/utilities/dbUtility.py:31: in execute_select\n    conn = self.create_connection()\nsrc/utilities/dbUtility.py:23: in create_connection\n    connection = pymysql.connect(host=self.host, user=self.creds['db_user'],\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:361: in __init__\n    self.connect()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:669: in connect\n    self._request_authentication()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:979: in _request_authentication\n    auth_packet = _auth.caching_sha2_password_auth(self, auth_packet)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:267: in caching_sha2_password_auth\n    data = sha2_rsa_encrypt(conn.password, conn.salt, conn.server_public_key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npassword = b'SpecialStudentsSecret'\nsalt = b\"rl\\x180\\x07b'M\\x08\\x07+j\\x13fS\\t^`%8\"\npublic_key = b'-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmE7rN2b1SK+cHlbBJuhy\\n7WnyqChNyu7BrMutBWtlMO...EozxYH9BW+KJ23\\nvx4a0Hrs6Ui6XNKiYmsK9l/PwEwYt3phoWR0RAh27OM12+mxaNwalSUs0uosqNFr\\nNwIDAQAB\\n-----END PUBLIC KEY-----\\n'\n\n    def sha2_rsa_encrypt(password, salt, public_key):\n        \"\"\"Encrypt password with salt and public_key.\n    \n        Used for sha256_password and caching_sha2_password.\n        \"\"\"\n        if not _have_cryptography:\n>           raise RuntimeError(\n                \"'cryptography' package is required for sha256_password or\"\n                + \" caching_sha2_password auth methods\"\n            )\nE           RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:144: RuntimeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_teardown","time":{"start":1757834396270,"stop":1757834396271,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test creating a product with an empty payload.\n\nVerifies that WooCommerce creates a product with default values when\nno fields are provided. Also checks that the product exists in the API\nand the database.\n\nArgs:\n    setup_teardown (dict): Fixture providing helpers for API and DB access.\n","status":"broken","statusMessage":"RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7f8d1d6e2990>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7f8d1d614510>}\n\n    @pytest.mark.ebe44\n    def test_create_empty_product_neg(setup_teardown):\n        \"\"\"Test creating a product with an empty payload.\n    \n        Verifies that WooCommerce creates a product with default values when\n        no fields are provided. Also checks that the product exists in the API\n        and the database.\n    \n        Args:\n            setup_teardown (dict): Fixture providing helpers for API and DB access.\n        \"\"\"\n        response = setup_teardown['products_api_helper'].call_create_product(payload={})\n        assert response, (\"Create product with empty payload returned empty response. Woocommerce api has no mandatory fields for creating a product.\"\n                          \"Expected status code: 201\")\n        prod_id = response['id']\n        setup_teardown['product_ids'].append(prod_id) # for teardown\n    \n        # assert default values are assigned to product\n        assert response[\"type\"] == \"simple\", (f\"Create product with empty payload returned wrong product type.\"\n                                              f\"Default product type: 'simple'. Actual: {response['type']} \")\n        assert response[\"name\"] == \"Product\", (f\"Create product with empty payload returned wrong product name.\"\n                                              f\"Default product name: 'Product'. Actual: {response['name']} \")\n    \n        # verify product exists via api and in db\n>       setup_teardown['generic_products_helper'].verify_product_is_created(response)\n\ntests/backend/products/test_create_products_negative.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_products_helper.py:151: in verify_product_is_created\n    db_product = self.products_dao.get_product_by_id(product_id)\nsrc/dao/products_dao.py:60: in get_product_by_id\n    return self.db_helper.execute_select(sql)\nsrc/utilities/dbUtility.py:31: in execute_select\n    conn = self.create_connection()\nsrc/utilities/dbUtility.py:23: in create_connection\n    connection = pymysql.connect(host=self.host, user=self.creds['db_user'],\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:361: in __init__\n    self.connect()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:669: in connect\n    self._request_authentication()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:979: in _request_authentication\n    auth_packet = _auth.caching_sha2_password_auth(self, auth_packet)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:267: in caching_sha2_password_auth\n    data = sha2_rsa_encrypt(conn.password, conn.salt, conn.server_public_key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npassword = b'SpecialStudentsSecret'\nsalt = b\"rl\\x180\\x07b'M\\x08\\x07+j\\x13fS\\t^`%8\"\npublic_key = b'-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmE7rN2b1SK+cHlbBJuhy\\n7WnyqChNyu7BrMutBWtlMO...EozxYH9BW+KJ23\\nvx4a0Hrs6Ui6XNKiYmsK9l/PwEwYt3phoWR0RAh27OM12+mxaNwalSUs0uosqNFr\\nNwIDAQAB\\n-----END PUBLIC KEY-----\\n'\n\n    def sha2_rsa_encrypt(password, salt, public_key):\n        \"\"\"Encrypt password with salt and public_key.\n    \n        Used for sha256_password and caching_sha2_password.\n        \"\"\"\n        if not _have_cryptography:\n>           raise RuntimeError(\n                \"'cryptography' package is required for sha256_password or\"\n                + \" caching_sha2_password auth methods\"\n            )\nE           RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:144: RuntimeError","steps":[],"attachments":[{"uid":"9f153cfb581533e1","name":"log","source":"9f153cfb581533e1.txt","type":"text/plain","size":237}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup_teardown::0","time":{"start":1757834399126,"stop":1757834399376,"duration":250},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"ebe44"},{"name":"tag","value":"products"},{"name":"tag","value":"create_product"},{"name":"parentSuite","value":"tests.backend.products"},{"name":"suite","value":"test_create_products_negative"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2089-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.products.test_create_products_negative"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ebe44","create_product","products"]},"source":"d73e31464bfaa95d.json","parameterValues":[]}