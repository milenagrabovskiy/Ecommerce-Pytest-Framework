"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Sun Aug 31 18:23:11 UTC 2025","Sun Aug 31 18:23:13 UTC 2025","2019","tests.backend.orders","test_create_order_notes","","","","test_create_order_note[guestuser_5_notes]","Test creating one or multiple order notes for a given user type.

Args:
    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.
    user_type (str): 'guest_user' or 'registered_user'.
    quantity (int): Number of notes to create.
"
"passed","Sun Aug 31 18:23:09 UTC 2025","Sun Aug 31 18:23:09 UTC 2025","557","tests.backend.customers","test_create_customer_smoke","TestCreateCustomer","","","test_create_customer_only_email_password","Test customer creation using only email and password.

Verifies:
    - HTTP 201 response from API
    - Valid response fields such as ID and role
    - Customer is stored correctly in the database

Raises:
    AssertionError: If any of the API or DB validations fail.
"
"passed","Sun Aug 31 18:23:34 UTC 2025","Sun Aug 31 18:23:35 UTC 2025","721","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_simple_virtual_product1]",""
"passed","Sun Aug 31 18:23:08 UTC 2025","Sun Aug 31 18:23:08 UTC 2025","109","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_invalid_discount_type","Negative test: Verify invalid discount type returns an error.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance.

Raises:
    AssertionError: If the API response does not match the expected error response.
"
"passed","Sun Aug 31 18:23:14 UTC 2025","Sun Aug 31 18:23:16 UTC 2025","2002","tests.backend.orders","test_create_order_notes","","","","test_create_order_note[reg_user_5_notes]","Test creating one or multiple order notes for a given user type.

Args:
    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.
    user_type (str): 'guest_user' or 'registered_user'.
    quantity (int): Number of notes to create.
"
"passed","Sun Aug 31 18:23:41 UTC 2025","Sun Aug 31 18:23:41 UTC 2025","300","tests.backend.products","test_get_products_smoke","","","","test_get_product_by_id",""
"passed","Sun Aug 31 18:23:07 UTC 2025","Sun Aug 31 18:23:07 UTC 2025","459","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_with_discount_type[fixed_product]","Test creating a coupon with various valid discount types.

Verifies that the POST API creates the coupon correctly and the GET API
retrieves the coupon with the expected values.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance and coupon IDs list.
    discount_type (str or None): Discount type to test; defaults to 'fixed_cart' if None.

Raises:
    AssertionError: If the POST or GET API responses do not match expected values.
"
"passed","Sun Aug 31 18:23:38 UTC 2025","Sun Aug 31 18:23:39 UTC 2025","1024","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_variable_product]",""
"passed","Sun Aug 31 18:23:17 UTC 2025","Sun Aug 31 18:23:20 UTC 2025","3137","tests.backend.orders","test_create_order_smoke","","","","test_create_order[guestuser_5_ord_1_prod]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Sun Aug 31 18:23:28 UTC 2025","Sun Aug 31 18:23:28 UTC 2025","273","tests.backend.orders","test_create_order_smoke","","","","test_create_order_no_payment_info","Verify order creation with missing billing, shipping, and payment data.

Ensures the API still creates an order when critical fields are empty and
sets the correct flags and status.

Args:
    my_orders_smoke_setup (dict): Fixture with product info, API helpers,
        and order tracking.

Asserts:
    - Response is not empty.
    - Order ID is generated and tracked for teardown.
    - `needs_processing` is True.
    - `needs_payment` is True.
    - Status equals ""pending"".
"
"passed","Sun Aug 31 18:23:07 UTC 2025","Sun Aug 31 18:23:07 UTC 2025","431","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_with_discount_type[fixed_cart]","Test creating a coupon with various valid discount types.

Verifies that the POST API creates the coupon correctly and the GET API
retrieves the coupon with the expected values.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance and coupon IDs list.
    discount_type (str or None): Discount type to test; defaults to 'fixed_cart' if None.

Raises:
    AssertionError: If the POST or GET API responses do not match expected values.
"
"passed","Sun Aug 31 18:23:10 UTC 2025","Sun Aug 31 18:23:10 UTC 2025","129","tests.backend.customers","test_create_customer_smoke","TestCreateCustomer","","","test_create_customer_fail_when_no_password_is_provided","Test API fails when no password is provided.

Verifies:
    - API returns 400
    - Error message specifies missing password

Raises:
    AssertionError: If missing param error is not correctly returned.
"
"passed","Sun Aug 31 18:23:21 UTC 2025","Sun Aug 31 18:23:25 UTC 2025","3223","tests.backend.orders","test_create_order_smoke","","","","test_create_order[reg_user_5_ord_1_prod]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Sun Aug 31 18:23:36 UTC 2025","Sun Aug 31 18:23:38 UTC 2025","1192","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_external_product]",""
"passed","Sun Aug 31 18:23:36 UTC 2025","Sun Aug 31 18:23:36 UTC 2025","932","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_grouped_product]",""
"passed","Sun Aug 31 18:23:33 UTC 2025","Sun Aug 31 18:23:34 UTC 2025","859","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_simple_virtual_product0]",""
"passed","Sun Aug 31 18:23:10 UTC 2025","Sun Aug 31 18:23:11 UTC 2025","1026","tests.backend.orders","test_create_order_notes","","","","test_create_order_note[guestuser_1_note]","Test creating one or multiple order notes for a given user type.

Args:
    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.
    user_type (str): 'guest_user' or 'registered_user'.
    quantity (int): Number of notes to create.
"
"passed","Sun Aug 31 18:23:25 UTC 2025","Sun Aug 31 18:23:28 UTC 2025","3225","tests.backend.orders","test_create_order_smoke","","","","test_create_order[reg_user_5_ord_5_prod]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Sun Aug 31 18:23:09 UTC 2025","Sun Aug 31 18:23:10 UTC 2025","134","tests.backend.customers","test_create_customer_smoke","TestCreateCustomer","","","test_create_customer_fail_for_existing_email","Test API fails when trying to create a customer with an existing email.

Verifies:
    - API returns 400
    - Appropriate error code and message are returned

Raises:
    AssertionError: If API response doesn't contain expected error code/message.
"
"passed","Sun Aug 31 18:23:21 UTC 2025","Sun Aug 31 18:23:21 UTC 2025","595","tests.backend.orders","test_create_order_smoke","","","","test_create_order[reg_user_1_ord_5_prods]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Sun Aug 31 18:23:07 UTC 2025","Sun Aug 31 18:23:08 UTC 2025","307","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_with_discount_type[None]","Test creating a coupon with various valid discount types.

Verifies that the POST API creates the coupon correctly and the GET API
retrieves the coupon with the expected values.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance and coupon IDs list.
    discount_type (str or None): Discount type to test; defaults to 'fixed_cart' if None.

Raises:
    AssertionError: If the POST or GET API responses do not match expected values.
"
"passed","Sun Aug 31 18:23:40 UTC 2025","Sun Aug 31 18:23:41 UTC 2025","422","tests.backend.products","test_get_products_smoke","","","","test_get_all_products_returns_not_empty",""
"passed","Sun Aug 31 18:23:13 UTC 2025","Sun Aug 31 18:23:14 UTC 2025","769","tests.backend.orders","test_create_order_notes","","","","test_create_order_note[reg_user_1_notes]","Test creating one or multiple order notes for a given user type.

Args:
    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.
    user_type (str): 'guest_user' or 'registered_user'.
    quantity (int): Number of notes to create.
"
"passed","Sun Aug 31 18:23:28 UTC 2025","Sun Aug 31 18:23:29 UTC 2025","428","tests.backend.orders","test_create_order_smoke","","","","test_create_order_empty_line_items_negative","Verify that an order can be created without products (empty line_items).

WooCommerce allows order creation without mandatory product fields.
This test ensures:
  - The order is created with an empty `line_items` list.
  - The order status is returned as ""completed"".

Args:
    my_orders_smoke_setup (fixture): Provides API helpers and teardown tracking.
"
"passed","Sun Aug 31 18:23:06 UTC 2025","Sun Aug 31 18:23:07 UTC 2025","1065","tests.backend.coupons","test_create_coupons_smoke","","","","test_create_coupon_with_discount_type[percent]","Test creating a coupon with various valid discount types.

Verifies that the POST API creates the coupon correctly and the GET API
retrieves the coupon with the expected values.

Args:
    setup_teardown (dict): Fixture providing CouponAPIHelper instance and coupon IDs list.
    discount_type (str or None): Discount type to test; defaults to 'fixed_cart' if None.

Raises:
    AssertionError: If the POST or GET API responses do not match expected values.
"
"passed","Sun Aug 31 18:23:33 UTC 2025","Sun Aug 31 18:23:33 UTC 2025","739","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_simple_product]",""
"passed","Sun Aug 31 18:23:16 UTC 2025","Sun Aug 31 18:23:17 UTC 2025","711","tests.backend.orders","test_create_order_smoke","","","","test_create_order[guestuser_1_ord_5_prods]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Sun Aug 31 18:23:20 UTC 2025","Sun Aug 31 18:23:21 UTC 2025","580","tests.backend.orders","test_create_order_smoke","","","","test_create_order[guestuser_1_ord_1_prod]","Verify that orders can be created and retrieved via the WooCommerce API.

This test covers multiple scenarios using parameterization:
    - Guest user creating 1 order with 1 item.
    - Guest user creating 1 order with multiple items.
    - Guest user creating multiple orders with 1 item each.
    - Registered user creating 1 order with multiple items.
    - Registered user creating multiple orders with 1 item each.
    - Registered user creating multiple orders with multiple items each.

For each scenario, asserts the following:
    - API response is not empty.
    - Order ID is an integer.
    - Customer ID matches expected value (0 for guest, or the correct customer ID).
    - Order key format starts with 'wc_order_'.
    - Newly created order can be retrieved via API and exists in the database.

Args:
    my_orders_smoke_setup (dict): Fixture providing product info, API helpers, and order tracking.
    user_type (str): Type of user creating the order, either ""guest_user"" or ""registered_user"".
    order_qty (int): Quantity of orders created via API.
    product_qty (int): Quantity of products in 'line_items' in payload to create order via API.
"
"passed","Sun Aug 31 18:23:35 UTC 2025","Sun Aug 31 18:23:36 UTC 2025","464","tests.backend.products","test_create_products_smoke","","","","test_create_product[create_simple_virtual_product2]",""
"passed","Sun Aug 31 18:24:02 UTC 2025","Sun Aug 31 18:24:02 UTC 2025","34","tests.frontend.home_page","test_home_page_smoke","TestHomePageSmoke","","","test_verify_heading_is_displayed",""
"passed","Sun Aug 31 18:24:02 UTC 2025","Sun Aug 31 18:24:02 UTC 2025","144","tests.frontend.home_page","test_home_page_smoke","TestHomePageSmoke","","","test_verify_number_of_products_displayed",""
"passed","Sun Aug 31 18:24:02 UTC 2025","Sun Aug 31 18:24:02 UTC 2025","98","tests.frontend.home_page","test_home_page_smoke","TestHomePageSmoke","","","test_verify_header_menu_is_displayed",""
"passed","Sun Aug 31 18:24:03 UTC 2025","Sun Aug 31 18:24:05 UTC 2025","2299","tests.frontend.my_account","test_login_negative","TestLoginNegative","","","test_login_none_existing_user",""
"passed","Sun Aug 31 18:23:38 UTC 2025","Sun Aug 31 18:23:42 UTC 2025","3218","tests.frontend.components","test_free_shipping_banner","TestFreeShippingBanner","","","test_verify_free_shipping_banner_displayed_in_checkout_page",""
"passed","Sun Aug 31 18:23:46 UTC 2025","Sun Aug 31 18:24:01 UTC 2025","15330","tests.frontend.end_to_end","test_end_to_end_checkout_guest_user","TestEndToEndCheckoutGuestUser","","","test_end_to_end_checkout_guest_user",""
"passed","Sun Aug 31 18:23:37 UTC 2025","Sun Aug 31 18:23:38 UTC 2025","1673","tests.frontend.components","test_free_shipping_banner","TestFreeShippingBanner","","","test_verify_free_shipping_banner_displayed_in_cart_page",""
"passed","Sun Aug 31 18:23:42 UTC 2025","Sun Aug 31 18:23:45 UTC 2025","3468","tests.frontend.components","test_free_shipping_banner","TestFreeShippingBanner","","","test_verify_free_shipping_banner_not_displayed_in_my_account_page",""
"passed","Sun Aug 31 18:23:36 UTC 2025","Sun Aug 31 18:23:37 UTC 2025","1117","tests.frontend.components","test_free_shipping_banner","TestFreeShippingBanner","","","test_verify_free_shipping_banner_displayed_in_home_page",""
"passed","Sun Aug 31 18:24:12 UTC 2025","Sun Aug 31 18:24:13 UTC 2025","540","tests.frontend.product_description_page","test_pdp_variable_product","TestProductDescriptionPageVariableProduct","","","test_verify_main_image_variable_prod","Verify that the main product image on the frontend matches the one returned by the API.

This test fetches the displayed product image URL from the frontend and compares it
against a list of image URLs retrieved from the API. It also checks that the displayed
URL is valid (i.e., starts with 'http' and ends with '.jpg').

Args:
    setup: A pytest fixture that sets up the browser and test environment.

Raises:
    AssertionError: If the image URL is invalid or does not match any from the API.
"
"passed","Sun Aug 31 18:24:06 UTC 2025","Sun Aug 31 18:24:09 UTC 2025","2669","tests.frontend.my_account","test_register_new_user","TestRegisterNewUser","","","test_register_valid_new_user","
Test to verify a valid user can register to the site.
It generates a random email and password, then registers the user.
:return:
"
"passed","Sun Aug 31 18:24:13 UTC 2025","Sun Aug 31 18:24:13 UTC 2025","64","tests.frontend.product_description_page","test_pdp_variable_product","TestProductDescriptionPageVariableProduct","","","test_verify_alternate_images_variable_prod","Verify that all alternate product images on the frontend match the API response.

This test retrieves all alternate product image URLs displayed on the frontend
and compares them to the image URLs returned by the WooCommerce API.

The comparison ignores the order of images but requires exact URL matches.

Args:
    setup: A pytest fixture that initializes the test environment and page objects.

Raises:
    AssertionError: If the displayed alternate image URLs do not match the API URLs.
"
"passed","Sun Aug 31 18:24:12 UTC 2025","Sun Aug 31 18:24:12 UTC 2025","100","tests.frontend.product_description_page","test_pdp_variable_product","TestProductDescriptionPageVariableProduct","","","test_verify_product_name_displayed_variable_product","Verify that the product name (h1 header) is correctly displayed for a variable product.

This test checks that the displayed product name on the frontend matches the expected value
for a known variable product. The product is hardcoded to keep the test frontend-only.

Args:
    setup: A pytest fixture that sets up the test environment and necessary page objects.

Raises:
    AssertionError: If the displayed product name does not match the expected name.
"
