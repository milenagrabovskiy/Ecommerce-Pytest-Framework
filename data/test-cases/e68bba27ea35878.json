{"uid":"e68bba27ea35878","name":"test_create_order_no_payment_info","fullName":"tests.backend.orders.test_create_order_smoke#test_create_order_no_payment_info","historyId":"8b9c1644805fb3591d2d9e341d5d0e48","time":{"start":1757095942020,"stop":1757095942633,"duration":613},"description":"Verify order creation with missing billing, shipping, and payment data.\n\nEnsures the API still creates an order when critical fields are empty and\nsets the correct flags and status.\n\nArgs:\n    my_orders_smoke_setup (dict): Fixture with product info, API helpers,\n        and order tracking.\n\nAsserts:\n    - Response is not empty.\n    - Order ID is generated and tracked for teardown.\n    - `needs_processing` is True.\n    - `needs_payment` is True.\n    - Status equals \"pending\".\n","descriptionHtml":"<p>Verify order creation with missing billing, shipping, and payment data.</p>\n<p>Ensures the API still creates an order when critical fields are empty and<br />\nsets the correct flags and status.</p>\n<p>Args:<br />\nmy_orders_smoke_setup (dict): Fixture with product info, API helpers,<br />\nand order tracking.</p>\n<p>Asserts:<br />\n- Response is not empty.<br />\n- Order ID is generated and tracked for teardown.<br />\n- <code>needs_processing</code> is True.<br />\n- <code>needs_payment</code> is True.<br />\n- Status equals &quot;pending&quot;.</p>\n","status":"broken","statusMessage":"KeyError: 0","statusTrace":"my_orders_smoke_setup = {'generic_orders_helper': <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object a...<demostore_automation.src.api_helpers.OrdersAPIHelper.OrdersAPIHelper object at 0x7f7320f304d0>, 'product_id': 20, ...}\n\n    @pytest.mark.ecomorders3\n    def test_create_order_no_payment_info(my_orders_smoke_setup):\n        \"\"\"Verify order creation with missing billing, shipping, and payment data.\n    \n        Ensures the API still creates an order when critical fields are empty and\n        sets the correct flags and status.\n    \n        Args:\n            my_orders_smoke_setup (dict): Fixture with product info, API helpers,\n                and order tracking.\n    \n        Asserts:\n            - Response is not empty.\n            - Order ID is generated and tracked for teardown.\n            - `needs_processing` is True.\n            - `needs_payment` is True.\n            - Status equals \"pending\".\n        \"\"\"\n        product_id = my_orders_smoke_setup[\"product_id\"]\n        product_price = my_orders_smoke_setup[\"product_price\"]\n        logger.info(f\"Product ID: {product_id}, Product price: {product_price}\")\n    \n        product_args = {\n                        \"line_items\": [{\"product_id\": product_id, \"quantity\": 1}],\n                        \"shipping\": {},\n                        \"billing\": {},\n                        \"shipping_lines\": {},\n                        \"set_paid\": False,\n                        \"payment_method\": '',\n                        \"payment_method_title\": ''\n                        }\n    \n        responses_list = my_orders_smoke_setup[\"generic_orders_helper\"].create_order(additional_args=product_args) # returns list\n>       create_order_response = responses_list[0] # take first (and only) response from list\nE       KeyError: 0\n\ntests/backend/orders/test_create_order_smoke.py:166: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"my_orders_smoke_setup","time":{"start":1757095921181,"stop":1757095921522,"duration":341},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify order creation with missing billing, shipping, and payment data.\n\nEnsures the API still creates an order when critical fields are empty and\nsets the correct flags and status.\n\nArgs:\n    my_orders_smoke_setup (dict): Fixture with product info, API helpers,\n        and order tracking.\n\nAsserts:\n    - Response is not empty.\n    - Order ID is generated and tracked for teardown.\n    - `needs_processing` is True.\n    - `needs_payment` is True.\n    - Status equals \"pending\".\n","status":"broken","statusMessage":"KeyError: 0","statusTrace":"my_orders_smoke_setup = {'generic_orders_helper': <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object a...<demostore_automation.src.api_helpers.OrdersAPIHelper.OrdersAPIHelper object at 0x7f7320f304d0>, 'product_id': 20, ...}\n\n    @pytest.mark.ecomorders3\n    def test_create_order_no_payment_info(my_orders_smoke_setup):\n        \"\"\"Verify order creation with missing billing, shipping, and payment data.\n    \n        Ensures the API still creates an order when critical fields are empty and\n        sets the correct flags and status.\n    \n        Args:\n            my_orders_smoke_setup (dict): Fixture with product info, API helpers,\n                and order tracking.\n    \n        Asserts:\n            - Response is not empty.\n            - Order ID is generated and tracked for teardown.\n            - `needs_processing` is True.\n            - `needs_payment` is True.\n            - Status equals \"pending\".\n        \"\"\"\n        product_id = my_orders_smoke_setup[\"product_id\"]\n        product_price = my_orders_smoke_setup[\"product_price\"]\n        logger.info(f\"Product ID: {product_id}, Product price: {product_price}\")\n    \n        product_args = {\n                        \"line_items\": [{\"product_id\": product_id, \"quantity\": 1}],\n                        \"shipping\": {},\n                        \"billing\": {},\n                        \"shipping_lines\": {},\n                        \"set_paid\": False,\n                        \"payment_method\": '',\n                        \"payment_method_title\": ''\n                        }\n    \n        responses_list = my_orders_smoke_setup[\"generic_orders_helper\"].create_order(additional_args=product_args) # returns list\n>       create_order_response = responses_list[0] # take first (and only) response from list\nE       KeyError: 0\n\ntests/backend/orders/test_create_order_smoke.py:166: KeyError","steps":[],"attachments":[{"uid":"108611ab9c11e9db","name":"log","source":"108611ab9c11e9db.txt","type":"text/plain","size":2238}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"my_orders_smoke_setup::0","time":{"start":1757095943530,"stop":1757095947949,"duration":4419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"ecomorders3"},{"name":"parentSuite","value":"tests.backend.orders"},{"name":"suite","value":"test_create_order_smoke"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2107-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.orders.test_create_order_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ecomorders3"]},"source":"e68bba27ea35878.json","parameterValues":[]}