{"uid":"9a12ac7e6abaa48f","name":"test_change_order_status[update to cancelled]","fullName":"tests.backend.orders.test_change_order_status#test_change_order_status","historyId":"0b34da7b5d1810d7a9be0f2ef09f78a8","time":{"start":1761117864960,"stop":1761117866544,"duration":1584},"description":"Test changing WooCommerce order status and verifying API and DB consistency.\n\nSteps:\n1. Create an order with default status 'processing'.\n2. Update the order to the specified `order_status`.\n3. Verify the update via the API response.\n4. Verify the order exists in the database with the correct updated status.\n5. For certain statuses (completed, cancelled, refunded), validate specific fields like\n   'needs_payment', 'date_completed', and 'refunds'.\n\nArgs:\n    my_orders_smoke_setup (fixture): Fixture providing product info, API helpers, and teardown logic.\n    order_status (str): The target status to update the order to (e.g., \"completed\", \"refunded\").\n\nAssertions:\n    - The order status is correctly updated in the API response.\n    - The order ID remains unchanged after update.\n    - API and DB responses match for the updated order.\n    - Relevant fields (like 'needs_payment' or 'date_completed') are correctly set for specific statuses.\n","descriptionHtml":"<p>Test changing WooCommerce order status and verifying API and DB consistency.</p>\n<p>Steps:</p>\n<ol>\n<li>Create an order with default status 'processing'.</li>\n<li>Update the order to the specified <code>order_status</code>.</li>\n<li>Verify the update via the API response.</li>\n<li>Verify the order exists in the database with the correct updated status.</li>\n<li>For certain statuses (completed, cancelled, refunded), validate specific fields like<br />\n'needs_payment', 'date_completed', and 'refunds'.</li>\n</ol>\n<p>Args:<br />\nmy_orders_smoke_setup (fixture): Fixture providing product info, API helpers, and teardown logic.<br />\norder_status (str): The target status to update the order to (e.g., &quot;completed&quot;, &quot;refunded&quot;).</p>\n<p>Assertions:<br />\n- The order status is correctly updated in the API response.<br />\n- The order ID remains unchanged after update.<br />\n- API and DB responses match for the updated order.<br />\n- Relevant fields (like 'needs_payment' or 'date_completed') are correctly set for specific statuses.</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"my_orders_smoke_setup","time":{"start":1761117860598,"stop":1761117861120,"duration":522},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test changing WooCommerce order status and verifying API and DB consistency.\n\nSteps:\n1. Create an order with default status 'processing'.\n2. Update the order to the specified `order_status`.\n3. Verify the update via the API response.\n4. Verify the order exists in the database with the correct updated status.\n5. For certain statuses (completed, cancelled, refunded), validate specific fields like\n   'needs_payment', 'date_completed', and 'refunds'.\n\nArgs:\n    my_orders_smoke_setup (fixture): Fixture providing product info, API helpers, and teardown logic.\n    order_status (str): The target status to update the order to (e.g., \"completed\", \"refunded\").\n\nAssertions:\n    - The order status is correctly updated in the API response.\n    - The order ID remains unchanged after update.\n    - API and DB responses match for the updated order.\n    - Relevant fields (like 'needs_payment' or 'date_completed') are correctly set for specific statuses.\n","status":"passed","steps":[],"attachments":[{"uid":"c37feda03704fc8d","name":"log","source":"c37feda03704fc8d.txt","type":"text/plain","size":7862}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"my_orders_smoke_setup::0","time":{"start":1761117871896,"stop":1761117873600,"duration":1704},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"ebe49"},{"name":"tag","value":"orders"},{"name":"tag","value":"order_status"},{"name":"parentSuite","value":"tests.backend.orders"},{"name":"suite","value":"test_change_order_status"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2087-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.orders.test_change_order_status"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"order_status","value":"'cancelled'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["ebe49","order_status","orders"]},"source":"9a12ac7e6abaa48f.json","parameterValues":["'cancelled'"]}