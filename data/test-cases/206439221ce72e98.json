{"uid":"206439221ce72e98","name":"test_create_product_review[review-out of range]","fullName":"tests.backend.products.test_create_product_reviews#test_create_product_review","historyId":"12b4b827f72b3539b97044a331f92f83","time":{"start":1759697803813,"stop":1759697805171,"duration":1358},"description":"Test creation and verification of a product review.\n\nSteps:\n1. Create a simple product via API.\n2. Optionally create a registered customer and order if `customer_bought` is True.\n3. Create a product review with the given rating.\n4. Verify review exists and is correct via both API and database.\n\nArgs:\n    setup_teardown (fixture): Fixture providing product helpers, API helpers, and teardown logic.\n    rating (int): Rating for the review (0-5 recommended).\n    customer_bought (bool): Whether the review is by a registered customer.\n\nAssertions:\n    - Review exists in API response with correct rating, status, and reviewer info.\n    - Review exists in DB with correct customer_id (if registered), email, and approved status.\n","descriptionHtml":"<p>Test creation and verification of a product review.</p>\n<p>Steps:</p>\n<ol>\n<li>Create a simple product via API.</li>\n<li>Optionally create a registered customer and order if <code>customer_bought</code> is True.</li>\n<li>Create a product review with the given rating.</li>\n<li>Verify review exists and is correct via both API and database.</li>\n</ol>\n<p>Args:<br />\nsetup_teardown (fixture): Fixture providing product helpers, API helpers, and teardown logic.<br />\nrating (int): Rating for the review (0-5 recommended).<br />\ncustomer_bought (bool): Whether the review is by a registered customer.</p>\n<p>Assertions:<br />\n- Review exists in API response with correct rating, status, and reviewer info.<br />\n- Review exists in DB with correct customer_id (if registered), email, and approved status.</p>\n","status":"skipped","statusMessage":"XFAIL rating of >5 is invalid. valid:0-5\n\nAssertionError: Error. The maximum rating is 5. Rating in api: 10","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7f3608a215b0>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7f36088fac60>}\nrating = 10, customer_bought = False\n\n    @pytest.mark.review\n    @pytest.mark.parametrize(\n         \"rating, customer_bought\",\n        [\n            pytest.param(0, False, marks=[pytest.mark.ebe62], id=\"review-lowest boundary\"),\n            pytest.param(5, False, marks=[pytest.mark.ebe63], id=\"review-highest boundary\"),\n            pytest.param(10, False, marks=[pytest.mark.ebe64, pytest.mark.xfail(\n                                                                  reason='rating of >5 is invalid. valid:0-5')],\n                                                                  id=\"review-out of range\"),\n            pytest.param(4, True, marks=[pytest.mark.ebe65], id=\"registered customer review\"),\n    \n        ]\n    )\n    def test_create_product_review(setup_teardown, rating, customer_bought):\n        \"\"\"Test creation and verification of a product review.\n    \n        Steps:\n        1. Create a simple product via API.\n        2. Optionally create a registered customer and order if `customer_bought` is True.\n        3. Create a product review with the given rating.\n        4. Verify review exists and is correct via both API and database.\n    \n        Args:\n            setup_teardown (fixture): Fixture providing product helpers, API helpers, and teardown logic.\n            rating (int): Rating for the review (0-5 recommended).\n            customer_bought (bool): Whether the review is by a registered customer.\n    \n        Assertions:\n            - Review exists in API response with correct rating, status, and reviewer info.\n            - Review exists in DB with correct customer_id (if registered), email, and approved status.\n        \"\"\"\n        created_customers = []  # for teardown\n        post_response = setup_teardown['generic_products_helper'].create_product_by_type('simple')\n    \n        logger.info(f\"product: {post_response}\")\n    \n        product_id = post_response['id']\n        setup_teardown['product_ids'].append(product_id)\n        if customer_bought:\n            random_email = generate_random_email_and_password(email_prefix=\"test_user\")[\"email\"]\n            password = \"Password123abc!\"\n            payload = {\n                \"email\": random_email,\n                \"password\": password\n                }\n            create_cust = WooAPIUtility().post(\"customers\", params=payload, expected_status_code=201)\n            customer_id = create_cust['id']\n            created_customers.append(customer_id)\n            generic_orders_helper = GenericOrdersHelper()\n            payload = {\n                \"customer_id\": customer_id,\n                \"line_items\": [{\"product_id\": product_id, \"quantity\": 1}],\n                \"status\": \"completed\",\n                \"billing\": {\n                    \"first_name\": \"Test_f\",\n                    \"last_name\": \"Test_l\",\n                    \"email\": random_email\n                }\n            }\n            create_order_responses = generic_orders_helper.create_order(additional_args=payload)\n            for create_order_response in create_order_responses:\n                assert create_order_response, f\"Create order as guest user API response is empty\"\n    \n        if customer_bought:\n            # create customer & order as before\n            review_response = setup_teardown['generic_products_helper'].create_product_review(\n                product_id,\n                rating,\n                reviewer=\"Test User\",\n                email=random_email  # registered customer's email\n            )\n        else:\n            review_response = setup_teardown['generic_products_helper'].create_product_review(\n                product_id,\n                rating\n            )\n        logger.info(f\"Review response: {review_response}\")\n    \n        cust_id = customer_id if customer_bought else None\n        email_to_pass = random_email if customer_bought else None\n    \n>       setup_teardown['generic_products_helper'].verify_product_review_exists(product_id, rating, customer_bought,\n                                                                               customer_id=cust_id,\n                                                                               reviewer_email=email_to_pass\n                                                                               )\n\ntests/backend/products/test_create_product_reviews.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper object at 0x7f36089daf90>\nproduct_id = 42579, rating = 10, customer_bought = False, customer_id = None\nreviewer_email = None\n\n    def verify_product_review_exists(self, product_id, rating, customer_bought, customer_id=None, reviewer_email=None):\n        \"\"\"Verify that a product review exists and matches expectations in both API and database.\n    \n        Args:\n            product_id (int): ID of the product to check reviews for.\n            rating (int): Expected rating of the review.\n            customer_bought (bool): Whether the reviewer is a registered customer.\n            customer_id (int, optional): Expected customer ID if reviewer is registered.\n            reviewer_email (str, optional): Expected reviewer email if reviewer is registered.\n    \n        Raises:\n            AssertionError: If any of the review checks fail (API or DB mismatch, missing fields, incorrect status).\n        \"\"\"\n        # verify product review persisted via api check\n        reviews = self.products_api_helper.call_retrieve_reviews(product_id)\n        if rating > 5:\n>           assert reviews[0]['rating'] == 5, f\"Error. The maximum rating is 5. Rating in api: {reviews[0]['rating']}\"\nE           AssertionError: Error. The maximum rating is 5. Rating in api: 10\n\nsrc/generic_helpers/generic_products_helper.py:270: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_teardown","time":{"start":1759697800080,"stop":1759697800080,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test creation and verification of a product review.\n\nSteps:\n1. Create a simple product via API.\n2. Optionally create a registered customer and order if `customer_bought` is True.\n3. Create a product review with the given rating.\n4. Verify review exists and is correct via both API and database.\n\nArgs:\n    setup_teardown (fixture): Fixture providing product helpers, API helpers, and teardown logic.\n    rating (int): Rating for the review (0-5 recommended).\n    customer_bought (bool): Whether the review is by a registered customer.\n\nAssertions:\n    - Review exists in API response with correct rating, status, and reviewer info.\n    - Review exists in DB with correct customer_id (if registered), email, and approved status.\n","status":"skipped","statusMessage":"XFAIL rating of >5 is invalid. valid:0-5\n\nAssertionError: Error. The maximum rating is 5. Rating in api: 10","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7f3608a215b0>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7f36088fac60>}\nrating = 10, customer_bought = False\n\n    @pytest.mark.review\n    @pytest.mark.parametrize(\n         \"rating, customer_bought\",\n        [\n            pytest.param(0, False, marks=[pytest.mark.ebe62], id=\"review-lowest boundary\"),\n            pytest.param(5, False, marks=[pytest.mark.ebe63], id=\"review-highest boundary\"),\n            pytest.param(10, False, marks=[pytest.mark.ebe64, pytest.mark.xfail(\n                                                                  reason='rating of >5 is invalid. valid:0-5')],\n                                                                  id=\"review-out of range\"),\n            pytest.param(4, True, marks=[pytest.mark.ebe65], id=\"registered customer review\"),\n    \n        ]\n    )\n    def test_create_product_review(setup_teardown, rating, customer_bought):\n        \"\"\"Test creation and verification of a product review.\n    \n        Steps:\n        1. Create a simple product via API.\n        2. Optionally create a registered customer and order if `customer_bought` is True.\n        3. Create a product review with the given rating.\n        4. Verify review exists and is correct via both API and database.\n    \n        Args:\n            setup_teardown (fixture): Fixture providing product helpers, API helpers, and teardown logic.\n            rating (int): Rating for the review (0-5 recommended).\n            customer_bought (bool): Whether the review is by a registered customer.\n    \n        Assertions:\n            - Review exists in API response with correct rating, status, and reviewer info.\n            - Review exists in DB with correct customer_id (if registered), email, and approved status.\n        \"\"\"\n        created_customers = []  # for teardown\n        post_response = setup_teardown['generic_products_helper'].create_product_by_type('simple')\n    \n        logger.info(f\"product: {post_response}\")\n    \n        product_id = post_response['id']\n        setup_teardown['product_ids'].append(product_id)\n        if customer_bought:\n            random_email = generate_random_email_and_password(email_prefix=\"test_user\")[\"email\"]\n            password = \"Password123abc!\"\n            payload = {\n                \"email\": random_email,\n                \"password\": password\n                }\n            create_cust = WooAPIUtility().post(\"customers\", params=payload, expected_status_code=201)\n            customer_id = create_cust['id']\n            created_customers.append(customer_id)\n            generic_orders_helper = GenericOrdersHelper()\n            payload = {\n                \"customer_id\": customer_id,\n                \"line_items\": [{\"product_id\": product_id, \"quantity\": 1}],\n                \"status\": \"completed\",\n                \"billing\": {\n                    \"first_name\": \"Test_f\",\n                    \"last_name\": \"Test_l\",\n                    \"email\": random_email\n                }\n            }\n            create_order_responses = generic_orders_helper.create_order(additional_args=payload)\n            for create_order_response in create_order_responses:\n                assert create_order_response, f\"Create order as guest user API response is empty\"\n    \n        if customer_bought:\n            # create customer & order as before\n            review_response = setup_teardown['generic_products_helper'].create_product_review(\n                product_id,\n                rating,\n                reviewer=\"Test User\",\n                email=random_email  # registered customer's email\n            )\n        else:\n            review_response = setup_teardown['generic_products_helper'].create_product_review(\n                product_id,\n                rating\n            )\n        logger.info(f\"Review response: {review_response}\")\n    \n        cust_id = customer_id if customer_bought else None\n        email_to_pass = random_email if customer_bought else None\n    \n>       setup_teardown['generic_products_helper'].verify_product_review_exists(product_id, rating, customer_bought,\n                                                                               customer_id=cust_id,\n                                                                               reviewer_email=email_to_pass\n                                                                               )\n\ntests/backend/products/test_create_product_reviews.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper object at 0x7f36089daf90>\nproduct_id = 42579, rating = 10, customer_bought = False, customer_id = None\nreviewer_email = None\n\n    def verify_product_review_exists(self, product_id, rating, customer_bought, customer_id=None, reviewer_email=None):\n        \"\"\"Verify that a product review exists and matches expectations in both API and database.\n    \n        Args:\n            product_id (int): ID of the product to check reviews for.\n            rating (int): Expected rating of the review.\n            customer_bought (bool): Whether the reviewer is a registered customer.\n            customer_id (int, optional): Expected customer ID if reviewer is registered.\n            reviewer_email (str, optional): Expected reviewer email if reviewer is registered.\n    \n        Raises:\n            AssertionError: If any of the review checks fail (API or DB mismatch, missing fields, incorrect status).\n        \"\"\"\n        # verify product review persisted via api check\n        reviews = self.products_api_helper.call_retrieve_reviews(product_id)\n        if rating > 5:\n>           assert reviews[0]['rating'] == 5, f\"Error. The maximum rating is 5. Rating in api: {reviews[0]['rating']}\"\nE           AssertionError: Error. The maximum rating is 5. Rating in api: 10\n\nsrc/generic_helpers/generic_products_helper.py:270: AssertionError","steps":[],"attachments":[{"uid":"63df27bbe0f4d388","name":"log","source":"63df27bbe0f4d388.txt","type":"text/plain","size":3520}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup_teardown::0","time":{"start":1759697808247,"stop":1759697809865,"duration":1618},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"review"},{"name":"tag","value":"ebe64"},{"name":"parentSuite","value":"tests.backend.products"},{"name":"suite","value":"test_create_product_reviews"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2117-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.products.test_create_product_reviews"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"customer_bought","value":"False"},{"name":"rating","value":"10"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["review","ebe64"]},"source":"206439221ce72e98.json","parameterValues":["False","10"]}