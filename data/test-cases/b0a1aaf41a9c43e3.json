{"uid":"b0a1aaf41a9c43e3","name":"test_cart_persistence_after_logout","fullName":"tests.frontend.my_account.test_cart_persistence_after_logout.TestCartPersistenceAfterLogout#test_cart_persistence_after_logout","historyId":"543f03d5e04455232f1db09d21836366","time":{"start":1760462735456,"stop":1760462743760,"duration":8304},"description":"Verify that a registered user's cart persists after logging out and logging back in.\n\nThis test ensures that when a registered user adds an item to their shopping cart,\nlogs out, and then logs back in, the item remains in their cart.\nIt validates that the application correctly maintains the user's cart data\nacross authenticated sessions.\n\nArgs:\n    create_registered_user (dict): Fixture that creates and returns a registered\n        user's credentials (email and password).\n\nExpected Result:\n    The product added before logging out remains in the cart after logging back in.\n","descriptionHtml":"<p>Verify that a registered user's cart persists after logging out and logging back in.</p>\n<p>This test ensures that when a registered user adds an item to their shopping cart,<br />\nlogs out, and then logs back in, the item remains in their cart.<br />\nIt validates that the application correctly maintains the user's cart data<br />\nacross authenticated sessions.</p>\n<p>Args:<br />\ncreate_registered_user (dict): Fixture that creates and returns a registered<br />\nuser's credentials (email and password).</p>\n<p>Expected Result:<br />\nThe product added before logging out remains in the cart after logging back in.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element with locator = ('css selector', 'li a.cart-contents span.count'), does not contain text: \"1 item\", after waiting 5 seconds.","statusTrace":"self = <test_cart_persistence_after_logout.TestCartPersistenceAfterLogout object at 0x7f1498a2f9d0>\ncreate_registered_user = {'email': 'testuser_sygkpattwl@supersqa.com', 'password': 'lDUUHWWixIYzJZCFUAIa'}\nsetup_fixture = None\n\n    @pytest.mark.efe58\n    def test_cart_persistence_after_logout(self, create_registered_user, setup_fixture):\n        \"\"\"Verify that a registered user's cart persists after logging out and logging back in.\n    \n        This test ensures that when a registered user adds an item to their shopping cart,\n        logs out, and then logs back in, the item remains in their cart.\n        It validates that the application correctly maintains the user's cart data\n        across authenticated sessions.\n    \n        Args:\n            create_registered_user (dict): Fixture that creates and returns a registered\n                user's credentials (email and password).\n    \n        Expected Result:\n            The product added before logging out remains in the cart after logging back in.\n        \"\"\"\n        # make registered user via conftest.py fixture\n        email = create_registered_user['email']\n        password = create_registered_user['password']\n    \n    \n        # add item to cart\n        first_product = 'Album'\n    \n        # logout\n        self.my_acct_so.go_to_my_account()\n    \n        self.my_acct_si.click_logout()\n    \n        # login\n        self.my_acct_so.input_login_username(email)\n        self.my_acct_so.input_login_password(password)\n        self.my_acct_so.click_login_button()\n    \n        # verify cart still contains item\n>       self.header.wait_until_cart_item_count(1)\n\ntests/frontend/my_account/test_cart_persistence_after_logout.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/Header.py:22: in wait_until_cart_item_count\n    self.sl.wait_until_element_contains_text(self.CART_ITEM_COUNT, expected_text)\nsrc/selenium_extended/SeleniumExtended.py:87: in wait_until_element_contains_text\n    WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"91de5020d1741a069b5874d1d077d95e\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x7f149899fa60>\nmessage = 'Element with locator = (\\'css selector\\', \\'li a.cart-contents span.count\\'), does not contain text: \"1 item\", after waiting 5 seconds.'\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Element with locator = ('css selector', 'li a.cart-contents span.count'), does not contain text: \"1 item\", after waiting 5 seconds.\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1760462731360,"stop":1760462731682,"duration":322},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"create_registered_user","time":{"start":1760462731682,"stop":1760462733957,"duration":2275},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_fixture","time":{"start":1760462733957,"stop":1760462735456,"duration":1499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"init_driver","time":{"start":1760462748997,"stop":1760462749288,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Verify that a registered user's cart persists after logging out and logging back in.\n\nThis test ensures that when a registered user adds an item to their shopping cart,\nlogs out, and then logs back in, the item remains in their cart.\nIt validates that the application correctly maintains the user's cart data\nacross authenticated sessions.\n\nArgs:\n    create_registered_user (dict): Fixture that creates and returns a registered\n        user's credentials (email and password).\n\nExpected Result:\n    The product added before logging out remains in the cart after logging back in.\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element with locator = ('css selector', 'li a.cart-contents span.count'), does not contain text: \"1 item\", after waiting 5 seconds.","statusTrace":"self = <test_cart_persistence_after_logout.TestCartPersistenceAfterLogout object at 0x7f1498a2f9d0>\ncreate_registered_user = {'email': 'testuser_sygkpattwl@supersqa.com', 'password': 'lDUUHWWixIYzJZCFUAIa'}\nsetup_fixture = None\n\n    @pytest.mark.efe58\n    def test_cart_persistence_after_logout(self, create_registered_user, setup_fixture):\n        \"\"\"Verify that a registered user's cart persists after logging out and logging back in.\n    \n        This test ensures that when a registered user adds an item to their shopping cart,\n        logs out, and then logs back in, the item remains in their cart.\n        It validates that the application correctly maintains the user's cart data\n        across authenticated sessions.\n    \n        Args:\n            create_registered_user (dict): Fixture that creates and returns a registered\n                user's credentials (email and password).\n    \n        Expected Result:\n            The product added before logging out remains in the cart after logging back in.\n        \"\"\"\n        # make registered user via conftest.py fixture\n        email = create_registered_user['email']\n        password = create_registered_user['password']\n    \n    \n        # add item to cart\n        first_product = 'Album'\n    \n        # logout\n        self.my_acct_so.go_to_my_account()\n    \n        self.my_acct_si.click_logout()\n    \n        # login\n        self.my_acct_so.input_login_username(email)\n        self.my_acct_so.input_login_password(password)\n        self.my_acct_so.click_login_button()\n    \n        # verify cart still contains item\n>       self.header.wait_until_cart_item_count(1)\n\ntests/frontend/my_account/test_cart_persistence_after_logout.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/Header.py:22: in wait_until_cart_item_count\n    self.sl.wait_until_element_contains_text(self.CART_ITEM_COUNT, expected_text)\nsrc/selenium_extended/SeleniumExtended.py:87: in wait_until_element_contains_text\n    WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"91de5020d1741a069b5874d1d077d95e\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x7f149899fa60>\nmessage = 'Element with locator = (\\'css selector\\', \\'li a.cart-contents span.count\\'), does not contain text: \"1 item\", after waiting 5 seconds.'\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Element with locator = ('css selector', 'li a.cart-contents span.count'), does not contain text: \"1 item\", after waiting 5 seconds.\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[],"attachments":[{"uid":"f6508a0dcc9a6f05","name":"log","source":"f6508a0dcc9a6f05.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"init_driver::0","time":{"start":1760462748915,"stop":1760462748995,"duration":80},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"init_driver::0","time":{"start":1760462751021,"stop":1760462751094,"duration":73},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"efe58"},{"name":"tag","value":"feregression"},{"name":"tag","value":"my_account"},{"name":"tag","value":"cart"},{"name":"tag","value":"cart_persistence"},{"name":"parentSuite","value":"tests.frontend.my_account"},{"name":"suite","value":"test_cart_persistence_after_logout"},{"name":"subSuite","value":"TestCartPersistenceAfterLogout"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2663-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.frontend.my_account.test_cart_persistence_after_logout"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["cart_persistence","efe58","feregression","my_account","cart"]},"source":"b0a1aaf41a9c43e3.json","parameterValues":[]}