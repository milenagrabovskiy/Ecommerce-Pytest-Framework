{"uid":"269fa635f7b58691","name":"test_create_product_invalid_param[invalid regular_price: random string]","fullName":"tests.backend.products.test_create_products_negative#test_create_product_invalid_param","historyId":"9b2ec2365eb2de0986b034218701bf15","time":{"start":1760462703150,"stop":1760462703548,"duration":398},"description":"Test product creation with invalid parameters.\n\nSends a create product request with invalid parameter values and\nverifies that the WooCommerce API returns an appropriate error.\n\nArgs:\n    setup_teardown (dict): Fixture providing helpers for API and DB access.\n    param (str): The product parameter being tested (e.g., \"type\", \"sku\").\n    value (any): The invalid value to send for the parameter.\n","descriptionHtml":"<p>Test product creation with invalid parameters.</p>\n<p>Sends a create product request with invalid parameter values and<br />\nverifies that the WooCommerce API returns an appropriate error.</p>\n<p>Args:<br />\nsetup_teardown (dict): Fixture providing helpers for API and DB access.<br />\nparam (str): The product parameter being tested (e.g., &quot;type&quot;, &quot;sku&quot;).<br />\nvalue (any): The invalid value to send for the parameter.</p>\n","status":"skipped","statusMessage":"XFAIL woocommerce bug: accepts letters in string, but 'stock_quantity' throws an error. Returns 'False' for 'purchasable'\n\nAssertionError: Bad Status code.Expected 400, Actual status code: 201,URL: http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/products?oauth_consumer_key=ck_cf778eee9bde12fa549ce0fc32de681d541860d1&oauth_timestamp=1760462703&oauth_nonce=0d41e648162e69596702e77503e852b49267cb29&oauth_signature_method=HMAC-SHA256&oauth_signature=bAZ%2F47nFT9aBpWg2PMpJzyFLHpyFwPV531cnBnC165Q%3D, Response Json: {'id': 45222, 'name': 'Product', 'slug': 'product-2', 'permalink': 'http://dev.bootcamp.store.supersqa.com/product/product-2/', 'date_created': '2025-10-14T17:25:03', 'date_created_gmt': '2025-10-14T17:25:03', 'date_modified': '2025-10-14T17:25:03', 'date_modified_gmt': '2025-10-14T17:25:03', 'type': 'simple', 'status': 'publish', 'featured': False, 'catalog_visibility': 'visible', 'description': '', 'short_description': '', 'sku': '', 'price': '', 'regular_price': '', 'sale_price': '', 'date_on_sale_from': None, 'date_on_sale_from_gmt': None, 'date_on_sale_to': None, 'date_on_sale_to_gmt': None, 'on_sale': False, 'purchasable': False, 'total_sales': 0, 'virtual': False, 'downloadable': False, 'downloads': [], 'download_limit': -1, 'download_expiry': -1, 'external_url': '', 'button_text': '', 'tax_status': 'taxable', 'tax_class': '', 'manage_stock': False, 'stock_quantity': None, 'backorders': 'no', 'backorders_allowed': False, 'backordered': False, 'low_stock_amount': None, 'sold_individually': False, 'weight': '', 'dimensions': {'length': '', 'width': '', 'height': ''}, 'shipping_required': True, 'shipping_taxable': True, 'shipping_class': '', 'shipping_class_id': 0, 'reviews_allowed': True, 'average_rating': '0', 'rating_count': 0, 'upsell_ids': [], 'cross_sell_ids': [], 'parent_id': 0, 'purchase_note': '', 'categories': [{'id': 15, 'name': 'Uncategorized', 'slug': 'uncategorized'}], 'tags': [], 'images': [], 'attributes': [], 'default_attributes': [], 'variations': [], 'grouped_products': [], 'menu_order': 0, 'price_html': '', 'related_ids': [29274, 45221], 'meta_data': [], 'stock_status': 'instock', 'has_options': False, 'post_password': '', 'global_unique_id': '', 'permalink_template': 'http://dev.bootcamp.store.supersqa.com/product/%pagename%/', 'generated_slug': 'product-2', '_links': {'self': [{'href': 'http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/products/45222', 'targetHints': {'allow': ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']}}], 'collection': [{'href': 'http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/products'}]}}","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7facab3f84d0>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7facab53af90>}\nparam = 'regular_price', value = 'abc'\n\n    @pytest.mark.create_product_neg\n    @pytest.mark.parametrize(\n        \"param, value\",\n        [\n            pytest.param(\"type\", \"invalid_type\", marks=[pytest.mark.ebe37], id=\"invalid product type:str\"),\n            pytest.param(\"type\", 123, marks=[pytest.mark.ebe38], id=\"invalid product type:int\"),\n            pytest.param(\"sku\", \"invalid_sku\", marks=[pytest.mark.ebe39], id=\"invalid product sku:str\"),\n            pytest.param(\"sku\", 123, marks=[pytest.mark.ebe40], id=\"invalid product sku:int\"),\n            pytest.param(\"regular_price\", 10.00, marks=[pytest.mark.ebe41], id=\"invalid regular_price:float\"),\n            pytest.param(\"regular_price\", 10, marks=[pytest.mark.ebe42], id=\"invalid regular_price:int\"),\n            pytest.param(\"stock_quantity\", \"abc\", marks=[pytest.mark.ebe43], id=\"invalid stock_quantity: rand str\"),\n            pytest.param(\n                \"regular_price\", \"-10.00\",\n                marks=[\n                    pytest.mark.ebe45,\n                    pytest.mark.xfail(\n                        reason=\"woocommerce bug: accepts negative regular_price as valid. negative float in DB, but FE shows '0.00'\")\n                ],\n                id=\"invalid regular_price:negative\"\n            ),\n            pytest.param(\n                \"regular_price\", \"abc\",\n                marks=[\n                    pytest.mark.ebe46,\n                    pytest.mark.xfail(\n                        reason=\"woocommerce bug: accepts letters in string, but 'stock_quantity' throws an error. Returns 'False' for 'purchasable'\"\n                    )\n                ],\n                id=\"invalid regular_price: random string\"\n            ),\n        ]\n    )\n    \n    def test_create_product_invalid_param(setup_teardown, param, value):\n        \"\"\"Test product creation with invalid parameters.\n    \n        Sends a create product request with invalid parameter values and\n        verifies that the WooCommerce API returns an appropriate error.\n    \n        Args:\n            setup_teardown (dict): Fixture providing helpers for API and DB access.\n            param (str): The product parameter being tested (e.g., \"type\", \"sku\").\n            value (any): The invalid value to send for the parameter.\n        \"\"\"\n        # create product with invalid param and assert correct error message is displayed\n>       post_response = setup_teardown['generic_products_helper'].create_product_invalid_param(param, value)\n\ntests/backend/products/test_create_products_negative.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_products_helper.py:200: in create_product_invalid_param\n    post_response = self.products_api_helper.call_create_product(payload=payload, expected_status_code=400)\nsrc/api_helpers/ProductsAPIHelper.py:35: in call_create_product\n    return self.woo_api_utility.post(\"products\", params=payload, expected_status_code=expected_status_code)\nsrc/utilities/wooAPIUtility.py:64: in post\n    self.assert_status_code()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.utilities.wooAPIUtility.WooAPIUtility object at 0x7facab3c99d0>\n\n    def assert_status_code(self):\n        \"\"\"Asserts that the actual response status code matches the expected status code.\n    \n        Raises:\n            AssertionError: If actual status code does not equal expected status code.\n        \"\"\"\n>       assert self.status_code == self.expected_status_code, f\"Bad Status code.\" \\\n          f\"Expected {self.expected_status_code}, Actual status code: {self.status_code},\" \\\n          f\"URL: {self.url}, Response Json: {self.rs_json}\"\nE       AssertionError: Bad Status code.Expected 400, Actual status code: 201,URL: http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/products?oauth_consumer_key=ck_cf778eee9bde12fa549ce0fc32de681d541860d1&oauth_timestamp=1760462703&oauth_nonce=0d41e648162e69596702e77503e852b49267cb29&oauth_signature_method=HMAC-SHA256&oauth_signature=bAZ%2F47nFT9aBpWg2PMpJzyFLHpyFwPV531cnBnC165Q%3D, Response Json: {'id': 45222, 'name': 'Product', 'slug': 'product-2', 'permalink': 'http://dev.bootcamp.store.supersqa.com/product/product-2/', 'date_created': '2025-10-14T17:25:03', 'date_created_gmt': '2025-10-14T17:25:03', 'date_modified': '2025-10-14T17:25:03', 'date_modified_gmt': '2025-10-14T17:25:03', 'type': 'simple', 'status': 'publish', 'featured': False, 'catalog_visibility': 'visible', 'description': '', 'short_description': '', 'sku': '', 'price': '', 'regular_price': '', 'sale_price': '', 'date_on_sale_from': None, 'date_on_sale_from_gmt': None, 'date_on_sale_to': None, 'date_on_sale_to_gmt': None, 'on_sale': False, 'purchasable': False, 'total_sales': 0, 'virtual': False, 'downloadable': False, 'downloads': [], 'download_limit': -1, 'download_expiry': -1, 'external_url': '', 'button_text': '', 'tax_status': 'taxable', 'tax_class': '', 'manage_stock': False, 'stock_quantity': None, 'backorders': 'no', 'backorders_allowed': False, 'backordered': False, 'low_stock_amount': None, 'sold_individually': False, 'weight': '', 'dimensions': {'length': '', 'width': '', 'height': ''}, 'shipping_required': True, 'shipping_taxable': True, 'shipping_class': '', 'shipping_class_id': 0, 'reviews_allowed': True, 'average_rating': '0', 'rating_count': 0, 'upsell_ids': [], 'cross_sell_ids': [], 'parent_id': 0, 'purchase_note': '', 'categories': [{'id': 15, 'name': 'Uncategorized', 'slug': 'uncategorized'}], 'tags': [], 'images': [], 'attributes': [], 'default_attributes': [], 'variations': [], 'grouped_products': [], 'menu_order': 0, 'price_html': '', 'related_ids': [29274, 45221], 'meta_data': [], 'stock_status': 'instock', 'has_options': False, 'post_password': '', 'global_unique_id': '', 'permalink_template': 'http://dev.bootcamp.store.supersqa.com/product/%pagename%/', 'generated_slug': 'product-2', '_links': {'self': [{'href': 'http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/products/45222', 'targetHints': {'allow': ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']}}], 'collection': [{'href': 'http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/products'}]}}\n\nsrc/utilities/wooAPIUtility.py:38: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_teardown","time":{"start":1760462701615,"stop":1760462701615,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"setup_teardown::0","time":{"start":1760462704230,"stop":1760462704462,"duration":232},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"create_product_neg"},{"name":"tag","value":"ebe46"},{"name":"tag","value":"products"},{"name":"tag","value":"create_product"},{"name":"parentSuite","value":"tests.backend.products"},{"name":"suite","value":"test_create_products_negative"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2088-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.products.test_create_products_negative"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"param","value":"'regular_price'"},{"name":"value","value":"'abc'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["create_product_neg","ebe46","create_product","products"]},"source":"269fa635f7b58691.json","parameterValues":["'regular_price'","'abc'"]}