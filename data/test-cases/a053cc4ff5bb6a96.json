{"uid":"a053cc4ff5bb6a96","name":"test_apply_coupon_to_new_order[apply_'percent'_coupon]","fullName":"tests.backend.coupons.test_apply_coupons#test_apply_coupon_to_new_order","historyId":"d369b267cfa97c57b958aba1735adf2b","time":{"start":1757661727925,"stop":1757661735830,"duration":7905},"description":"Test applying a coupon to a newly created order.\n\nThis test:\n1. Creates a new order for a random or fixed product.\n2. Retrieves or creates a coupon depending on the discount type.\n3. Applies the coupon to the order via API.\n4. Verifies that the order total and discount are correct.\n5. Checks that the customer is listed as having used the coupon.\n\nArgs:\n    apply_coupon_setup (dict): Fixture providing setup info and helpers.\n    discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).\n\nAsserts:\n    - Order total before and after applying coupon.\n    - Discount applied matches expected.\n    - Coupon is valid and published.\n    - Customer is correctly listed as a coupon user.\n","descriptionHtml":"<p>Test applying a coupon to a newly created order.</p>\n<p>This test:</p>\n<ol>\n<li>Creates a new order for a random or fixed product.</li>\n<li>Retrieves or creates a coupon depending on the discount type.</li>\n<li>Applies the coupon to the order via API.</li>\n<li>Verifies that the order total and discount are correct.</li>\n<li>Checks that the customer is listed as having used the coupon.</li>\n</ol>\n<p>Args:<br />\napply_coupon_setup (dict): Fixture providing setup info and helpers.<br />\ndiscount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).</p>\n<p>Asserts:<br />\n- Order total before and after applying coupon.<br />\n- Discount applied matches expected.<br />\n- Coupon is valid and published.<br />\n- Customer is correctly listed as a coupon user.</p>\n","status":"failed","statusMessage":"AssertionError: Coupon failed to be applied. Total before coupon: 0.00 Total after coupon: 0.0","statusTrace":"apply_coupon_setup = {'coupon_ids': [], 'coupons_api_helper': <demostore_automation.src.api_helpers.CouponAPIHelper.CouponAPIHelper object ...tion.src.dao.coupons_dao.CouponsDAO object at 0x7f177f289d30>, 'customer_email': 'tcid29_zmnunmzcto@supersqa.com', ...}\ndiscount_type = 'percent'\n\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\n        \"discount_type\",\n        [\n            pytest.param(\"percent\", marks=pytest.mark.ebe8, id=\"apply_'percent'_coupon\"),\n            pytest.param(\"fixed_cart\", marks=pytest.mark.ebe9, id=\"apply_'fixed_cart'_coupon\"),\n            pytest.param(\"fixed_product\", marks=pytest.mark.ebe10, id=\"apply_'fixed_product'_coupon\"),\n            pytest.param(\"free_coupon\", marks=pytest.mark.ebe11, id=\"apply_free_coupon\")\n        ]\n    )\n    \n    def test_apply_coupon_to_new_order(apply_coupon_setup, discount_type):\n        \"\"\"Test applying a coupon to a newly created order.\n    \n        This test:\n        1. Creates a new order for a random or fixed product.\n        2. Retrieves or creates a coupon depending on the discount type.\n        3. Applies the coupon to the order via API.\n        4. Verifies that the order total and discount are correct.\n        5. Checks that the customer is listed as having used the coupon.\n    \n        Args:\n            apply_coupon_setup (dict): Fixture providing setup info and helpers.\n            discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).\n    \n        Asserts:\n            - Order total before and after applying coupon.\n            - Discount applied matches expected.\n            - Coupon is valid and published.\n            - Customer is correctly listed as a coupon user.\n        \"\"\"\n    \n        if discount_type == \"fixed_product\":\n            product_id = 34 # hardcoded for V-neck shirt, a reg price variable product\n        # fetch random product from DB\n        else:\n            product_id = apply_coupon_setup['product_id']\n        logger.info(f\"DB product id: {product_id} DB product name: {apply_coupon_setup['random_product']['post_title']}\")\n    \n        # fetch random customer from DB\n        customer_id = apply_coupon_setup['customer_id']\n        customer_email = apply_coupon_setup['customer_email']\n        logger.info(f\"DB customer id: {customer_id} DB customer email: {customer_email}\")\n    \n        # create order with custom args\n        order_response = apply_coupon_setup['generic_orders_helper'].create_order_for_customer(customer_id, product_id)[0]\n        order_id = order_response['id']\n        apply_coupon_setup['order_ids'].append(order_id) # for teardown\n        logger.info(f\"Successfully created order with id: {order_id}\")\n        logger.info(f\"Order total before coupon: {order_response['total']}\")\n    \n        # get call for order confirming total is cart total and no coupons applied\n        get_order = apply_coupon_setup['orders_api_helper'].call_retrieve_order(order_id)\n        total_before = get_order['total']\n        logger.info(f\"GET order for order id: {order_id}: {get_order}\")\n    \n        assert order_response['total'] == total_before, (f\"Create order response total does not match GET order response total.\"\n                                                               f\"Create response: {order_response['total']}\"\n                                                               f\"GET response: {get_order['total']}\")\n    \n        # Fetch coupon from DB or create coupon for 'fixed_product' via helper method\n        coupon_id, coupon_code = apply_coupon_setup[\"generic_coupons_helper\"].get_coupon(\n            discount_type, get_order, coupon_ids=apply_coupon_setup[\"coupon_ids\"])\n    \n        # Get coupon details with GET call\n        coupon_details = apply_coupon_setup['coupons_api_helper'].call_retrieve_coupon(coupon_id)\n        coupon_type = coupon_details['discount_type']\n        discount = coupon_details['amount']\n        coupon_expiration = coupon_details['date_expires']\n        logger.info(f\"Found coupon with discount amount: {discount} discount_type: {coupon_type}. Coupon expiration date: {coupon_expiration}\")\n        assert coupon_details['status'] == 'publish', f\"Error. Coupon status: {coupon_details['status']}.\"\n        assert apply_coupon_setup['generic_coupons_helper'].is_coupon_valid(coupon_id), f\"Coupon is expired. Coupon expiration: {coupon_expiration}\"\n    \n    \n        # make api PUT call for order and add coupon_lines\n        update_response = apply_coupon_setup['generic_coupons_helper'].apply_coupon_to_order(coupon_code, order_id)\n        total_after = update_response['total']\n        logger.info(f\"PUT response with coupon: {update_response}\")\n        logger.info(f\"Order total after applying coupon: {total_after}\")\n    \n        # verify coupon applied successfully\n>       apply_coupon_setup['generic_coupons_helper'].verify_coupon_successfully_applied(\n            order_id=order_id,\n            total_before=total_before,\n            expected_discount=discount,\n            coupon_id=coupon_id\n        )\n\ntests/backend/coupons/test_apply_coupons.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_coupons_helper.GenericCouponsHelper object at 0x7f177f28a900>\norder_id = 36728, total_before = '0.00', coupon_id = 75\nexpected_discount = '25.00'\n\n    def verify_coupon_successfully_applied(self, order_id, total_before, coupon_id, expected_discount):\n        \"\"\"Verify that a coupon has been correctly applied to an order.\n    \n        Args:\n            order_id (int): ID of the order.\n            total_before (float): Order total before coupon application.\n            coupon_id (int): ID of the applied coupon.\n            expected_discount (float): Expected discount amount.\n    \n        Raises:\n            AssertionError: If coupon was not applied correctly or totals mismatch.\n        \"\"\"\n        order_response = self.orders_api_helper.call_retrieve_order(order_id)\n        coupon_response = self.coupons_api_helper.call_retrieve_coupon(coupon_id)\n        discount_type = coupon_response['discount_type']\n    \n        total_before_float = float(total_before)\n        expected_discount_float = float(expected_discount)\n        total_after_float = float(order_response['total'])\n        discount_total_float = float(order_response['discount_total'])\n    \n        if discount_type == 'percent':\n            applied_discount = total_before_float * (expected_discount_float / 100)\n        else:\n            applied_discount = min(expected_discount_float, total_before_float)\n    \n        applied_discount_rounded = round(applied_discount, 2)\n        expected_total_after_float = round(max(total_before_float - applied_discount_rounded, 0.0), 2)\n    \n>       assert round(total_before_float, 2) != round(total_after_float, 2), \\\n            f\"Coupon failed to be applied. Total before coupon: {total_before} Total after coupon: {total_after_float}\"\nE       AssertionError: Coupon failed to be applied. Total before coupon: 0.00 Total after coupon: 0.0\n\nsrc/generic_helpers/generic_coupons_helper.py:125: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"apply_coupon_setup","time":{"start":1757661726672,"stop":1757661727924,"duration":1252},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test applying a coupon to a newly created order.\n\nThis test:\n1. Creates a new order for a random or fixed product.\n2. Retrieves or creates a coupon depending on the discount type.\n3. Applies the coupon to the order via API.\n4. Verifies that the order total and discount are correct.\n5. Checks that the customer is listed as having used the coupon.\n\nArgs:\n    apply_coupon_setup (dict): Fixture providing setup info and helpers.\n    discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).\n\nAsserts:\n    - Order total before and after applying coupon.\n    - Discount applied matches expected.\n    - Coupon is valid and published.\n    - Customer is correctly listed as a coupon user.\n","status":"failed","statusMessage":"AssertionError: Coupon failed to be applied. Total before coupon: 0.00 Total after coupon: 0.0","statusTrace":"apply_coupon_setup = {'coupon_ids': [], 'coupons_api_helper': <demostore_automation.src.api_helpers.CouponAPIHelper.CouponAPIHelper object ...tion.src.dao.coupons_dao.CouponsDAO object at 0x7f177f289d30>, 'customer_email': 'tcid29_zmnunmzcto@supersqa.com', ...}\ndiscount_type = 'percent'\n\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\n        \"discount_type\",\n        [\n            pytest.param(\"percent\", marks=pytest.mark.ebe8, id=\"apply_'percent'_coupon\"),\n            pytest.param(\"fixed_cart\", marks=pytest.mark.ebe9, id=\"apply_'fixed_cart'_coupon\"),\n            pytest.param(\"fixed_product\", marks=pytest.mark.ebe10, id=\"apply_'fixed_product'_coupon\"),\n            pytest.param(\"free_coupon\", marks=pytest.mark.ebe11, id=\"apply_free_coupon\")\n        ]\n    )\n    \n    def test_apply_coupon_to_new_order(apply_coupon_setup, discount_type):\n        \"\"\"Test applying a coupon to a newly created order.\n    \n        This test:\n        1. Creates a new order for a random or fixed product.\n        2. Retrieves or creates a coupon depending on the discount type.\n        3. Applies the coupon to the order via API.\n        4. Verifies that the order total and discount are correct.\n        5. Checks that the customer is listed as having used the coupon.\n    \n        Args:\n            apply_coupon_setup (dict): Fixture providing setup info and helpers.\n            discount_type (str): Type of coupon to apply (percent, fixed_cart, fixed_product, free_coupon).\n    \n        Asserts:\n            - Order total before and after applying coupon.\n            - Discount applied matches expected.\n            - Coupon is valid and published.\n            - Customer is correctly listed as a coupon user.\n        \"\"\"\n    \n        if discount_type == \"fixed_product\":\n            product_id = 34 # hardcoded for V-neck shirt, a reg price variable product\n        # fetch random product from DB\n        else:\n            product_id = apply_coupon_setup['product_id']\n        logger.info(f\"DB product id: {product_id} DB product name: {apply_coupon_setup['random_product']['post_title']}\")\n    \n        # fetch random customer from DB\n        customer_id = apply_coupon_setup['customer_id']\n        customer_email = apply_coupon_setup['customer_email']\n        logger.info(f\"DB customer id: {customer_id} DB customer email: {customer_email}\")\n    \n        # create order with custom args\n        order_response = apply_coupon_setup['generic_orders_helper'].create_order_for_customer(customer_id, product_id)[0]\n        order_id = order_response['id']\n        apply_coupon_setup['order_ids'].append(order_id) # for teardown\n        logger.info(f\"Successfully created order with id: {order_id}\")\n        logger.info(f\"Order total before coupon: {order_response['total']}\")\n    \n        # get call for order confirming total is cart total and no coupons applied\n        get_order = apply_coupon_setup['orders_api_helper'].call_retrieve_order(order_id)\n        total_before = get_order['total']\n        logger.info(f\"GET order for order id: {order_id}: {get_order}\")\n    \n        assert order_response['total'] == total_before, (f\"Create order response total does not match GET order response total.\"\n                                                               f\"Create response: {order_response['total']}\"\n                                                               f\"GET response: {get_order['total']}\")\n    \n        # Fetch coupon from DB or create coupon for 'fixed_product' via helper method\n        coupon_id, coupon_code = apply_coupon_setup[\"generic_coupons_helper\"].get_coupon(\n            discount_type, get_order, coupon_ids=apply_coupon_setup[\"coupon_ids\"])\n    \n        # Get coupon details with GET call\n        coupon_details = apply_coupon_setup['coupons_api_helper'].call_retrieve_coupon(coupon_id)\n        coupon_type = coupon_details['discount_type']\n        discount = coupon_details['amount']\n        coupon_expiration = coupon_details['date_expires']\n        logger.info(f\"Found coupon with discount amount: {discount} discount_type: {coupon_type}. Coupon expiration date: {coupon_expiration}\")\n        assert coupon_details['status'] == 'publish', f\"Error. Coupon status: {coupon_details['status']}.\"\n        assert apply_coupon_setup['generic_coupons_helper'].is_coupon_valid(coupon_id), f\"Coupon is expired. Coupon expiration: {coupon_expiration}\"\n    \n    \n        # make api PUT call for order and add coupon_lines\n        update_response = apply_coupon_setup['generic_coupons_helper'].apply_coupon_to_order(coupon_code, order_id)\n        total_after = update_response['total']\n        logger.info(f\"PUT response with coupon: {update_response}\")\n        logger.info(f\"Order total after applying coupon: {total_after}\")\n    \n        # verify coupon applied successfully\n>       apply_coupon_setup['generic_coupons_helper'].verify_coupon_successfully_applied(\n            order_id=order_id,\n            total_before=total_before,\n            expected_discount=discount,\n            coupon_id=coupon_id\n        )\n\ntests/backend/coupons/test_apply_coupons.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.generic_helpers.generic_coupons_helper.GenericCouponsHelper object at 0x7f177f28a900>\norder_id = 36728, total_before = '0.00', coupon_id = 75\nexpected_discount = '25.00'\n\n    def verify_coupon_successfully_applied(self, order_id, total_before, coupon_id, expected_discount):\n        \"\"\"Verify that a coupon has been correctly applied to an order.\n    \n        Args:\n            order_id (int): ID of the order.\n            total_before (float): Order total before coupon application.\n            coupon_id (int): ID of the applied coupon.\n            expected_discount (float): Expected discount amount.\n    \n        Raises:\n            AssertionError: If coupon was not applied correctly or totals mismatch.\n        \"\"\"\n        order_response = self.orders_api_helper.call_retrieve_order(order_id)\n        coupon_response = self.coupons_api_helper.call_retrieve_coupon(coupon_id)\n        discount_type = coupon_response['discount_type']\n    \n        total_before_float = float(total_before)\n        expected_discount_float = float(expected_discount)\n        total_after_float = float(order_response['total'])\n        discount_total_float = float(order_response['discount_total'])\n    \n        if discount_type == 'percent':\n            applied_discount = total_before_float * (expected_discount_float / 100)\n        else:\n            applied_discount = min(expected_discount_float, total_before_float)\n    \n        applied_discount_rounded = round(applied_discount, 2)\n        expected_total_after_float = round(max(total_before_float - applied_discount_rounded, 0.0), 2)\n    \n>       assert round(total_before_float, 2) != round(total_after_float, 2), \\\n            f\"Coupon failed to be applied. Total before coupon: {total_before} Total after coupon: {total_after_float}\"\nE       AssertionError: Coupon failed to be applied. Total before coupon: 0.00 Total after coupon: 0.0\n\nsrc/generic_helpers/generic_coupons_helper.py:125: AssertionError","steps":[],"attachments":[{"uid":"df7204993cf029c","name":"log","source":"df7204993cf029c.txt","type":"text/plain","size":8820}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"apply_coupon_setup::0","time":{"start":1757661752650,"stop":1757661755917,"duration":3267},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"smoke"},{"name":"tag","value":"ebe8"},{"name":"tag","value":"applycoupon"},{"name":"parentSuite","value":"tests.backend.coupons"},{"name":"suite","value":"test_apply_coupons"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2093-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.coupons.test_apply_coupons"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"discount_type","value":"'percent'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["smoke","applycoupon","ebe8"]},"source":"a053cc4ff5bb6a96.json","parameterValues":["'percent'"]}