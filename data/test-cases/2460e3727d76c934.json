{"uid":"2460e3727d76c934","name":"test_create_order_note[reg_user_5_notes]","fullName":"tests.backend.orders.test_create_order_notes#test_create_order_note","historyId":"fd4470dc2f23f90f6d18541585857b42","time":{"start":1756316661675,"stop":1756316663317,"duration":1642},"description":"Test creating one or multiple order notes for a given user type.\n\nArgs:\n    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.\n    user_type (str): 'guest_user' or 'registered_user'.\n    quantity (int): Number of notes to create.\n","descriptionHtml":"<p>Test creating one or multiple order notes for a given user type.</p>\n<p>Args:<br />\norder_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.<br />\nuser_type (str): 'guest_user' or 'registered_user'.<br />\nquantity (int): Number of notes to create.</p>\n","status":"broken","statusMessage":"TypeError: list indices must be integers or slices, not str","statusTrace":"order_notes_setup = {'customers_dao': <demostore_automation.src.dao.customers_dao.CustomersDAO object at 0x7ff0aab6c3e0>, 'generic_orders_...orders_helper.GenericOrdersHelper object at 0x7ff0aaa15550>, 'note_text': 'Automation test note', 'order_ids': [], ...}\nuser_type = 'registered_user', quantity = 5\n\n    @pytest.mark.parametrize(\n        \"user_type, quantity\",\n        [\n            pytest.param(\"guest_user\", 1, marks=[pytest.mark.ecomnotes, pytest.mark.ecomnotes1], id=\"guestuser_1_note\"),\n            pytest.param(\"guest_user\", 5, marks=[pytest.mark.ecomnotes, pytest.mark.ecomnotes1], id=\"guestuser_5_notes\"),\n            pytest.param(\"registered_user\", 1, marks=[pytest.mark.ecomnotes, pytest.mark.ecomnotes2], id=\"reg_user_1_notes\"),\n            pytest.param(\"registered_user\", 5, marks=[pytest.mark.ecomnotes, pytest.mark.ecomnotes2], id=\"reg_user_5_notes\")\n        ]\n    )\n    @pytest.mark.ordernotes\n    def test_create_order_note(order_notes_setup, user_type, quantity):\n        \"\"\"Test creating one or multiple order notes for a given user type.\n    \n        Args:\n            order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.\n            user_type (str): 'guest_user' or 'registered_user'.\n            quantity (int): Number of notes to create.\n        \"\"\"\n        # determine 'user_type'\n        if user_type == \"registered_user\":\n            customer = order_notes_setup[\"customers_dao\"].get_random_customer_from_db(qty=1)[0]\n            customer_id = customer[\"ID\"]\n        else:\n            customer_id = 0\n    \n        # create order with product and quantity\n        order_payload = {\n            \"customer_id\": customer_id,\n            \"line_items\": [{\"product_id\": order_notes_setup[\"product_id\"], \"quantity\": quantity}]\n        }\n        order = order_notes_setup[\"generic_orders_helper\"].create_order(additional_args=order_payload)\n>       order_id = order[\"id\"]\nE       TypeError: list indices must be integers or slices, not str\n\ntests/backend/orders/test_create_order_notes.py:77: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"order_notes_setup","time":{"start":1756316658085,"stop":1756316658457,"duration":372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test creating one or multiple order notes for a given user type.\n\nArgs:\n    order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.\n    user_type (str): 'guest_user' or 'registered_user'.\n    quantity (int): Number of notes to create.\n","status":"broken","statusMessage":"TypeError: list indices must be integers or slices, not str","statusTrace":"order_notes_setup = {'customers_dao': <demostore_automation.src.dao.customers_dao.CustomersDAO object at 0x7ff0aab6c3e0>, 'generic_orders_...orders_helper.GenericOrdersHelper object at 0x7ff0aaa15550>, 'note_text': 'Automation test note', 'order_ids': [], ...}\nuser_type = 'registered_user', quantity = 5\n\n    @pytest.mark.parametrize(\n        \"user_type, quantity\",\n        [\n            pytest.param(\"guest_user\", 1, marks=[pytest.mark.ecomnotes, pytest.mark.ecomnotes1], id=\"guestuser_1_note\"),\n            pytest.param(\"guest_user\", 5, marks=[pytest.mark.ecomnotes, pytest.mark.ecomnotes1], id=\"guestuser_5_notes\"),\n            pytest.param(\"registered_user\", 1, marks=[pytest.mark.ecomnotes, pytest.mark.ecomnotes2], id=\"reg_user_1_notes\"),\n            pytest.param(\"registered_user\", 5, marks=[pytest.mark.ecomnotes, pytest.mark.ecomnotes2], id=\"reg_user_5_notes\")\n        ]\n    )\n    @pytest.mark.ordernotes\n    def test_create_order_note(order_notes_setup, user_type, quantity):\n        \"\"\"Test creating one or multiple order notes for a given user type.\n    \n        Args:\n            order_notes_setup (dict): Fixture providing DAOs, helpers, product ID, note text, and order tracking.\n            user_type (str): 'guest_user' or 'registered_user'.\n            quantity (int): Number of notes to create.\n        \"\"\"\n        # determine 'user_type'\n        if user_type == \"registered_user\":\n            customer = order_notes_setup[\"customers_dao\"].get_random_customer_from_db(qty=1)[0]\n            customer_id = customer[\"ID\"]\n        else:\n            customer_id = 0\n    \n        # create order with product and quantity\n        order_payload = {\n            \"customer_id\": customer_id,\n            \"line_items\": [{\"product_id\": order_notes_setup[\"product_id\"], \"quantity\": quantity}]\n        }\n        order = order_notes_setup[\"generic_orders_helper\"].create_order(additional_args=order_payload)\n>       order_id = order[\"id\"]\nE       TypeError: list indices must be integers or slices, not str\n\ntests/backend/orders/test_create_order_notes.py:77: TypeError","steps":[],"attachments":[{"uid":"e2334ccdb2930420","name":"log","source":"e2334ccdb2930420.txt","type":"text/plain","size":2837}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"order_notes_setup::0","time":{"start":1756316663322,"stop":1756316663322,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"ordernotes"},{"name":"tag","value":"ecomnotes"},{"name":"tag","value":"ecomnotes2"},{"name":"parentSuite","value":"tests.backend.orders"},{"name":"suite","value":"test_create_order_notes"},{"name":"host","value":"pkrvmccyg1gnepe"},{"name":"thread","value":"2088-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.orders.test_create_order_notes"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"quantity","value":"5"},{"name":"user_type","value":"'registered_user'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ordernotes","ecomnotes2","ecomnotes"]},"source":"2460e3727d76c934.json","parameterValues":["5","'registered_user'"]}