{"uid":"aca0732045de25be","name":"test_create_product[create_variable_product]","fullName":"tests.backend.products.test_create_products_smoke#test_create_product","historyId":"f1b48767e1e7c768c2364083e864ebf8","time":{"start":1758007430003,"stop":1758007430493,"duration":490},"status":"broken","statusMessage":"RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7f0383428050>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7f0383745f50>}\nproduct_type = 'variable', additional_args = None\n\n    @pytest.mark.ecom188\n    @pytest.mark.parametrize(\n        \"product_type, additional_args\",\n        [\n            pytest.param(\"simple\", None, marks=[pytest.mark.ebe19, pytest.mark.smoke], id=\"create_simple_product\"),\n            pytest.param(\"simple\", {\"virtual\": True}, marks=[pytest.mark.ebe20], id=\"create_simple_virtual_product\"),\n            pytest.param(\"simple\", {\"downloadable\": True}, marks=[pytest.mark.ebe21], id=\"create_simple_virtual_product\"),\n            pytest.param(\"simple\", {\"virtual\": True,\"downloadable\": True}, marks=[pytest.mark.ebe22], id=\"create_simple_virtual_product\"),\n            pytest.param(\"grouped\", None, marks=[pytest.mark.ebe23], id=\"create_grouped_product\"),\n            pytest.param(\"external\", None, marks=[pytest.mark.ebe24], id=\"create_external_product\"),\n            pytest.param(\"variable\", None, marks=[pytest.mark.ebe25], id=\"create_variable_product\")\n        ]\n    )\n    def test_create_product(setup_teardown, product_type, additional_args):\n        # create product via api\n        post_response = setup_teardown['generic_products_helper'].create_product_by_type(product_type)\n    \n        logger.info(f\"product: {post_response}\")\n    \n        product_id = post_response['id']\n        setup_teardown['product_ids'].append(product_id) # for teardown\n    \n        # verify product exists in api and db\n>       assert setup_teardown['generic_products_helper'].verify_product_is_created(post_response)\n\ntests/backend/products/test_create_products_smoke.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_products_helper.py:151: in verify_product_is_created\n    db_product = self.products_dao.get_product_by_id(product_id)\nsrc/dao/products_dao.py:60: in get_product_by_id\n    return self.db_helper.execute_select(sql)\nsrc/utilities/dbUtility.py:31: in execute_select\n    conn = self.create_connection()\nsrc/utilities/dbUtility.py:23: in create_connection\n    connection = pymysql.connect(host=self.host, user=self.creds['db_user'],\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:361: in __init__\n    self.connect()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:669: in connect\n    self._request_authentication()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:979: in _request_authentication\n    auth_packet = _auth.caching_sha2_password_auth(self, auth_packet)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:267: in caching_sha2_password_auth\n    data = sha2_rsa_encrypt(conn.password, conn.salt, conn.server_public_key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npassword = b'SpecialStudentsSecret', salt = b'qK4\\\\Y\\x0fj\\x03]PS+_\\x1d/\\x02`u<C'\npublic_key = b'-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmE7rN2b1SK+cHlbBJuhy\\n7WnyqChNyu7BrMutBWtlMO...EozxYH9BW+KJ23\\nvx4a0Hrs6Ui6XNKiYmsK9l/PwEwYt3phoWR0RAh27OM12+mxaNwalSUs0uosqNFr\\nNwIDAQAB\\n-----END PUBLIC KEY-----\\n'\n\n    def sha2_rsa_encrypt(password, salt, public_key):\n        \"\"\"Encrypt password with salt and public_key.\n    \n        Used for sha256_password and caching_sha2_password.\n        \"\"\"\n        if not _have_cryptography:\n>           raise RuntimeError(\n                \"'cryptography' package is required for sha256_password or\"\n                + \" caching_sha2_password auth methods\"\n            )\nE           RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:144: RuntimeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup_teardown","time":{"start":1758007427108,"stop":1758007427108,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods","statusTrace":"setup_teardown = {'generic_products_helper': <demostore_automation.src.generic_helpers.generic_products_helper.GenericProductsHelper ob...t at 0x7f0383428050>, 'products_dao': <demostore_automation.src.dao.products_dao.ProductsDAO object at 0x7f0383745f50>}\nproduct_type = 'variable', additional_args = None\n\n    @pytest.mark.ecom188\n    @pytest.mark.parametrize(\n        \"product_type, additional_args\",\n        [\n            pytest.param(\"simple\", None, marks=[pytest.mark.ebe19, pytest.mark.smoke], id=\"create_simple_product\"),\n            pytest.param(\"simple\", {\"virtual\": True}, marks=[pytest.mark.ebe20], id=\"create_simple_virtual_product\"),\n            pytest.param(\"simple\", {\"downloadable\": True}, marks=[pytest.mark.ebe21], id=\"create_simple_virtual_product\"),\n            pytest.param(\"simple\", {\"virtual\": True,\"downloadable\": True}, marks=[pytest.mark.ebe22], id=\"create_simple_virtual_product\"),\n            pytest.param(\"grouped\", None, marks=[pytest.mark.ebe23], id=\"create_grouped_product\"),\n            pytest.param(\"external\", None, marks=[pytest.mark.ebe24], id=\"create_external_product\"),\n            pytest.param(\"variable\", None, marks=[pytest.mark.ebe25], id=\"create_variable_product\")\n        ]\n    )\n    def test_create_product(setup_teardown, product_type, additional_args):\n        # create product via api\n        post_response = setup_teardown['generic_products_helper'].create_product_by_type(product_type)\n    \n        logger.info(f\"product: {post_response}\")\n    \n        product_id = post_response['id']\n        setup_teardown['product_ids'].append(product_id) # for teardown\n    \n        # verify product exists in api and db\n>       assert setup_teardown['generic_products_helper'].verify_product_is_created(post_response)\n\ntests/backend/products/test_create_products_smoke.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_products_helper.py:151: in verify_product_is_created\n    db_product = self.products_dao.get_product_by_id(product_id)\nsrc/dao/products_dao.py:60: in get_product_by_id\n    return self.db_helper.execute_select(sql)\nsrc/utilities/dbUtility.py:31: in execute_select\n    conn = self.create_connection()\nsrc/utilities/dbUtility.py:23: in create_connection\n    connection = pymysql.connect(host=self.host, user=self.creds['db_user'],\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:361: in __init__\n    self.connect()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:669: in connect\n    self._request_authentication()\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/connections.py:979: in _request_authentication\n    auth_packet = _auth.caching_sha2_password_auth(self, auth_packet)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:267: in caching_sha2_password_auth\n    data = sha2_rsa_encrypt(conn.password, conn.salt, conn.server_public_key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npassword = b'SpecialStudentsSecret', salt = b'qK4\\\\Y\\x0fj\\x03]PS+_\\x1d/\\x02`u<C'\npublic_key = b'-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmE7rN2b1SK+cHlbBJuhy\\n7WnyqChNyu7BrMutBWtlMO...EozxYH9BW+KJ23\\nvx4a0Hrs6Ui6XNKiYmsK9l/PwEwYt3phoWR0RAh27OM12+mxaNwalSUs0uosqNFr\\nNwIDAQAB\\n-----END PUBLIC KEY-----\\n'\n\n    def sha2_rsa_encrypt(password, salt, public_key):\n        \"\"\"Encrypt password with salt and public_key.\n    \n        Used for sha256_password and caching_sha2_password.\n        \"\"\"\n        if not _have_cryptography:\n>           raise RuntimeError(\n                \"'cryptography' package is required for sha256_password or\"\n                + \" caching_sha2_password auth methods\"\n            )\nE           RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pymysql/_auth.py:144: RuntimeError","steps":[],"attachments":[{"uid":"44be8c2c7a4a8cc4","name":"log","source":"44be8c2c7a4a8cc4.txt","type":"text/plain","size":2594}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"setup_teardown::0","time":{"start":1758007430534,"stop":1758007431955,"duration":1421},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"ecom188"},{"name":"tag","value":"ebe25"},{"name":"tag","value":"products"},{"name":"tag","value":"create_products"},{"name":"parentSuite","value":"tests.backend.products"},{"name":"suite","value":"test_create_products_smoke"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2079-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.products.test_create_products_smoke"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"additional_args","value":"None"},{"name":"product_type","value":"'variable'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ecom188","ebe25","create_products","products"]},"source":"aca0732045de25be.json","parameterValues":["None","'variable'"]}