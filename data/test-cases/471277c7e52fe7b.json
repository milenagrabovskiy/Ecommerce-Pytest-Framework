{"uid":"471277c7e52fe7b","name":"test_end_to_end_checkout[registered_user]","fullName":"tests.frontend.end_to_end.test_end_to_end_checkout_guest_user.TestEndToEndCheckout#test_end_to_end_checkout","historyId":"a8cf3a7e4488d16df1050e898afee4ac","time":{"start":1761243561783,"stop":1761243582476,"duration":20693},"description":"Validate end-to-end checkout for guest and registered users.\n\nThis test relies on the `setup_fixture` class-scoped fixture, which initializes\nall required page objects.\n\nArgs:\n    user_type (str): The type of user to test with. Can be:\n        * \"guest_user\" – goes through checkout without creating an account.\n        * \"registered_user\" – registers a new account and verifies order history.\n\nAsserts:\n    * A product can be successfully added to the cart.\n    * The coupon is applied and the order total is updated.\n    * An order number is generated upon successful checkout.\n    * For registered users, the order number appears in account history.\n","descriptionHtml":"<p>Validate end-to-end checkout for guest and registered users.</p>\n<p>This test relies on the <code>setup_fixture</code> class-scoped fixture, which initializes<br />\nall required page objects.</p>\n<p>Args:<br />\nuser_type (str): The type of user to test with. Can be:<br />\n* &quot;guest_user&quot; – goes through checkout without creating an account.<br />\n* &quot;registered_user&quot; – registers a new account and verifies order history.</p>\n<p>Asserts:<br />\n* A product can be successfully added to the cart.<br />\n* The coupon is applied and the order total is updated.<br />\n* An order number is generated upon successful checkout.<br />\n* For registered users, the order number appears in account history.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: Element with locator ('xpath', '//*[@id=\"post-8\"]/div/div/div[4]/div[2]/form/div[5]'), is not clickable.\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:202:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:555:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16","statusTrace":"self = <demostore_automation.src.selenium_extended.SeleniumExtended.SeleniumExtended object at 0x7fde3269c210>\nlocator = ('xpath', '//*[@id=\"post-8\"]/div/div/div[4]/div[2]/form/div[5]')\ntimeout = 5\n\n    def wait_and_click(self, locator, timeout=None):\n        \"\"\"Wait for element to be clickable and click it.\n    \n        Args:\n            locator (tuple): Locator for the element.\n            timeout (int, optional): Max wait time in seconds.\n        \"\"\"\n        timeout = timeout if timeout else self.default_timeout\n        try:\n            element = WebDriverWait(self.driver, timeout).until(\n                EC.element_to_be_clickable(locator)\n            )\n            self.driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", element)\n            time.sleep(1)  # allow for scroll completion\n>           element.click()\n\nsrc/selenium_extended/SeleniumExtended.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fde327e6b10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"The element with the reference d39ce8...ys.mjs:297:10\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:179:30\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: The element with the reference d39ce803-6310-4ba6-98a5-b34aa9bf64a3 is stale; either its node document is not the active document, or it is no longer connected to the DOM; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:202:5\nE       StaleElementReferenceError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:831:5\nE       getKnownElement@chrome://remote/content/marionette/json.sys.mjs:405:11\nE       deserializeJSON@chrome://remote/content/marionette/json.sys.mjs:263:20\nE       cloneObject@chrome://remote/content/marionette/json.sys.mjs:59:24\nE       deserializeJSON@chrome://remote/content/marionette/json.sys.mjs:293:16\nE       json.deserialize@chrome://remote/content/marionette/json.sys.mjs:297:10\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:179:30\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <end_to_end.test_end_to_end_checkout_guest_user.TestEndToEndCheckout object at 0x7fde3275f250>\nuser_type = 'registered_user'\n\n    @pytest.mark.tcid33\n    @pytest.mark.pioneertcid3\n    def test_end_to_end_checkout(self, user_type):\n        \"\"\"Validate end-to-end checkout for guest and registered users.\n    \n        This test relies on the `setup_fixture` class-scoped fixture, which initializes\n        all required page objects.\n    \n        Args:\n            user_type (str): The type of user to test with. Can be:\n                * \"guest_user\" – goes through checkout without creating an account.\n                * \"registered_user\" – registers a new account and verifies order history.\n    \n        Asserts:\n            * A product can be successfully added to the cart.\n            * The coupon is applied and the order total is updated.\n            * An order number is generated upon successful checkout.\n            * For registered users, the order number appears in account history.\n        \"\"\"\n        if user_type == 'registered_user': # create a registered user\n            self.my_acc_so.go_to_my_account()\n            self.registered_email = generate_random_email_and_password()['email']\n            self.my_acc_so.input_register_email(self.registered_email)\n            self.my_acc_so.input_register_password(generate_random_email_and_password()['password'])\n            self.my_acc_so.click_register_button()\n    \n        # go to home page\n        self.home_page.go_to_home_page()\n    \n        # add item to cart\n        self.home_page.click_first_add_to_cart_button()\n    \n        # make sure the cart is updated before going to cart\n        self.header.wait_until_cart_item_count(1)\n    \n        # go to cart\n        self.header.click_on_cart_on_right_header()\n    \n        # verify there are items in the cart\n        product_names = self.cart_page.get_all_product_names_in_cart()\n        assert len(product_names) == 1, f\"Expected 1 product in cart but found {len(product_names)}\"\n    \n        #  apply coupon\n        self.cart_page.click_apply_coupon_arrow()\n        coupon_code = MainConfigs.get_coupon_code('FREE_COUPON')\n        self.cart_page.apply_coupon(coupon_code)\n        self.cart_page.verify_order_total_is_0()\n    \n        # proceed to checkout\n        self.cart_page.click_on_proceed_to_checkout()\n    \n        # fill in checkout form\n        if user_type == 'registered_user':\n            self.checkout_page.fill_in_billing_info()\n        else:\n            self.checkout_page.fill_in_billing_info()\n    \n        # submit\n        self.checkout_page.click_place_order()\n>       self.checkout_page.click_place_order()\n\ntests/frontend/end_to_end/test_end_to_end_checkout_guest_user.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/CheckoutPage.py:78: in click_place_order\n    self.sl.wait_and_click(self.PLACE_ORDER_BTN)\nsrc/selenium_extended/SeleniumExtended.py:68: in wait_and_click\n    element = WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3a4416ae-a443-4c1e-9616-dcba445d7e97\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7fde3268d940>\nmessage = 'Element with locator (\\'xpath\\', \\'//*[@id=\"post-8\"]/div/div/div[4]/div[2]/form/div[5]\\'), is not clickable.'\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: Element with locator ('xpath', '//*[@id=\"post-8\"]/div/div/div[4]/div[2]/form/div[5]'), is not clickable.\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:202:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:555:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:136:16\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"init_driver","time":{"start":1761243545732,"stop":1761243547271,"duration":1539},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup_fixture","time":{"start":1761243547272,"stop":1761243547272,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"init_driver","time":{"start":1761243583187,"stop":1761243584756,"duration":1569},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"init_driver::0","time":{"start":1761243582532,"stop":1761243583185,"duration":653},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"init_driver::0","time":{"start":1761243586574,"stop":1761243587194,"duration":620},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"pioneertcid3"},{"name":"tag","value":"tcid33"},{"name":"tag","value":"efe124"},{"name":"tag","value":"feregression"},{"name":"tag","value":"end_to_end"},{"name":"parentSuite","value":"tests.frontend.end_to_end"},{"name":"suite","value":"test_end_to_end_checkout_guest_user"},{"name":"subSuite","value":"TestEndToEndCheckout"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2703-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.frontend.end_to_end.test_end_to_end_checkout_guest_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"user_type","value":"'registered_user'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6da1162d8b26a584","status":"passed","time":{"start":1761243540151,"stop":1761243556402,"duration":16251}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["pioneertcid3","feregression","efe124","end_to_end","tcid33"]},"source":"471277c7e52fe7b.json","parameterValues":["'registered_user'"]}