{"uid":"6f6b474a553027ac","name":"test_order_refund[update to same status]","fullName":"tests.backend.orders.test_order_refunds#test_order_refund","historyId":"28c43c8b7f6668a94f39318753f3d649","time":{"start":1758150246062,"stop":1758150246754,"duration":692},"description":"Test WooCommerce order refunds via API.\n\nSteps:\n1. Create a new order with a product.\n2. Apply refund based on `refund_type`:\n   - full: refund entire order\n   - partial: refund half the order\n   - refund_1_product: refund a single product\n3. Verify that the refund amount returned by the API matches expected value.\n\nArgs:\n    my_orders_smoke_setup (fixture): Fixture providing product, order, and helper setup.\n    refund_type (str): Type of refund to apply. One of \"full\", \"partial\", \"refund_1_product\".\n\nAssertions:\n    - Order creation API returns valid responses.\n    - Refund API returns the correct refund amount.\n","descriptionHtml":"<p>Test WooCommerce order refunds via API.</p>\n<p>Steps:</p>\n<ol>\n<li>Create a new order with a product.</li>\n<li>Apply refund based on <code>refund_type</code>:\n<ul>\n<li>full: refund entire order</li>\n<li>partial: refund half the order</li>\n<li>refund_1_product: refund a single product</li>\n</ul>\n</li>\n<li>Verify that the refund amount returned by the API matches expected value.</li>\n</ol>\n<p>Args:<br />\nmy_orders_smoke_setup (fixture): Fixture providing product, order, and helper setup.<br />\nrefund_type (str): Type of refund to apply. One of &quot;full&quot;, &quot;partial&quot;, &quot;refund_1_product&quot;.</p>\n<p>Assertions:<br />\n- Order creation API returns valid responses.<br />\n- Refund API returns the correct refund amount.</p>\n","status":"skipped","statusMessage":"XFAIL  Response Json: {'code': 'woocommerce_rest_cannot_create_order_refund','message': 'The payment gateway for this order does not support automatic refunds.', 'data': 500}\n\nAssertionError: Bad Status code.Expected 200, Actual status code: 500,URL: http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/orders/37587/refunds/?oauth_consumer_key=ck_cf778eee9bde12fa549ce0fc32de681d541860d1&oauth_timestamp=1758150246&oauth_nonce=e2fc1347e95dfbc86d08b3f580f11c308c55c216&oauth_signature_method=HMAC-SHA256&oauth_signature=UNxiwcOzBOYAyXV08SCrt1IZOwv1uHBn9xEvj4aG%2FUE%3D, Response Json: {'code': 'woocommerce_rest_cannot_create_order_refund', 'message': 'The payment gateway for this order does not support automatic refunds.', 'data': 500}","statusTrace":"my_orders_smoke_setup = {'generic_orders_helper': <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object a...<demostore_automation.src.api_helpers.OrdersAPIHelper.OrdersAPIHelper object at 0x7f5a4550cb50>, 'product_id': 39, ...}\nrefund_type = 'full'\n\n    @pytest.mark.xfail(reason=\" Response Json: {'code': 'woocommerce_rest_cannot_create_order_refund',\"\n                              \"'message': 'The payment gateway for this order does not support automatic refunds.', 'data': 500}\")\n    @pytest.mark.order_status_edge\n    @pytest.mark.parametrize(\n         \"refund_type\",\n        [\n            pytest.param(\"full\", marks=[pytest.mark.ebe47], id=\"update to same status\"),\n            pytest.param(\"partial\", marks=[pytest.mark.ebe48, pytest.mark.smoke], id=\"update to empty string\"),\n            pytest.param(\"refund_1_product\", marks=[pytest.mark.ebe49], id=\"update to random string\")\n        ]\n    )\n    \n    def test_order_refund(my_orders_smoke_setup, refund_type):\n        \"\"\"Test WooCommerce order refunds via API.\n    \n        Steps:\n        1. Create a new order with a product.\n        2. Apply refund based on `refund_type`:\n           - full: refund entire order\n           - partial: refund half the order\n           - refund_1_product: refund a single product\n        3. Verify that the refund amount returned by the API matches expected value.\n    \n        Args:\n            my_orders_smoke_setup (fixture): Fixture providing product, order, and helper setup.\n            refund_type (str): Type of refund to apply. One of \"full\", \"partial\", \"refund_1_product\".\n    \n        Assertions:\n            - Order creation API returns valid responses.\n            - Refund API returns the correct refund amount.\n        \"\"\"\n        # fetch product and customer\n        # create order\n        product_id = my_orders_smoke_setup[\"product_id\"]\n        product_price = my_orders_smoke_setup[\"product_price\"]\n        logger.info(f\"Product ID: {product_id}, Product price: {product_price}\")\n    \n        #create payload 'line_items' with custom product\n        create_payload = {\n            \"status\": \"processing\",\n            \"payment_method\": \"bacs\",\n            \"payment_method_title\": \"bacs\",\n            \"line_items\": [{\"product_id\": product_id}]\n        }\n        # make api call to create order\n        product_qty = 2 if refund_type == 'refund_1_product' else 1\n        create_order_responses = my_orders_smoke_setup[\"generic_orders_helper\"].create_order(additional_args=create_payload,\n                                                                                             product_qty=product_qty)\n        for create_order_response in create_order_responses:\n            assert create_order_response, f\"Create order API response is empty\"\n    \n            order_id = create_order_response['id']\n    \n            my_orders_smoke_setup[\"order_ids\"].append(order_id) # keeps track of newly created order_id for teardown\n    \n            # make UPDATE call with refund\n>           update_response = (my_orders_smoke_setup['generic_orders_helper'].create_order_refund(order_response=create_order_response,\n                                                                                                  refund_type=refund_type))\n\ntests/backend/orders/test_order_refunds.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_orders_helper.py:255: in create_order_refund\n    response = self.orders_api_helper.call_create_refund(\nsrc/api_helpers/OrdersAPIHelper.py:104: in call_create_refund\n    return self.woo_api_utility.post(f'orders/{order_id}/refunds/', params=payload)\nsrc/utilities/wooAPIUtility.py:64: in post\n    self.assert_status_code()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.utilities.wooAPIUtility.WooAPIUtility object at 0x7f5a45499310>\n\n    def assert_status_code(self):\n        \"\"\"Asserts that the actual response status code matches the expected status code.\n    \n        Raises:\n            AssertionError: If actual status code does not equal expected status code.\n        \"\"\"\n>       assert self.status_code == self.expected_status_code, f\"Bad Status code.\" \\\n          f\"Expected {self.expected_status_code}, Actual status code: {self.status_code},\" \\\n          f\"URL: {self.url}, Response Json: {self.rs_json}\"\nE       AssertionError: Bad Status code.Expected 200, Actual status code: 500,URL: http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/orders/37587/refunds/?oauth_consumer_key=ck_cf778eee9bde12fa549ce0fc32de681d541860d1&oauth_timestamp=1758150246&oauth_nonce=e2fc1347e95dfbc86d08b3f580f11c308c55c216&oauth_signature_method=HMAC-SHA256&oauth_signature=UNxiwcOzBOYAyXV08SCrt1IZOwv1uHBn9xEvj4aG%2FUE%3D, Response Json: {'code': 'woocommerce_rest_cannot_create_order_refund', 'message': 'The payment gateway for this order does not support automatic refunds.', 'data': 500}\n\nsrc/utilities/wooAPIUtility.py:38: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"my_orders_smoke_setup","time":{"start":1758150245719,"stop":1758150246062,"duration":343},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test WooCommerce order refunds via API.\n\nSteps:\n1. Create a new order with a product.\n2. Apply refund based on `refund_type`:\n   - full: refund entire order\n   - partial: refund half the order\n   - refund_1_product: refund a single product\n3. Verify that the refund amount returned by the API matches expected value.\n\nArgs:\n    my_orders_smoke_setup (fixture): Fixture providing product, order, and helper setup.\n    refund_type (str): Type of refund to apply. One of \"full\", \"partial\", \"refund_1_product\".\n\nAssertions:\n    - Order creation API returns valid responses.\n    - Refund API returns the correct refund amount.\n","status":"skipped","statusMessage":"XFAIL  Response Json: {'code': 'woocommerce_rest_cannot_create_order_refund','message': 'The payment gateway for this order does not support automatic refunds.', 'data': 500}\n\nAssertionError: Bad Status code.Expected 200, Actual status code: 500,URL: http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/orders/37587/refunds/?oauth_consumer_key=ck_cf778eee9bde12fa549ce0fc32de681d541860d1&oauth_timestamp=1758150246&oauth_nonce=e2fc1347e95dfbc86d08b3f580f11c308c55c216&oauth_signature_method=HMAC-SHA256&oauth_signature=UNxiwcOzBOYAyXV08SCrt1IZOwv1uHBn9xEvj4aG%2FUE%3D, Response Json: {'code': 'woocommerce_rest_cannot_create_order_refund', 'message': 'The payment gateway for this order does not support automatic refunds.', 'data': 500}","statusTrace":"my_orders_smoke_setup = {'generic_orders_helper': <demostore_automation.src.generic_helpers.generic_orders_helper.GenericOrdersHelper object a...<demostore_automation.src.api_helpers.OrdersAPIHelper.OrdersAPIHelper object at 0x7f5a4550cb50>, 'product_id': 39, ...}\nrefund_type = 'full'\n\n    @pytest.mark.xfail(reason=\" Response Json: {'code': 'woocommerce_rest_cannot_create_order_refund',\"\n                              \"'message': 'The payment gateway for this order does not support automatic refunds.', 'data': 500}\")\n    @pytest.mark.order_status_edge\n    @pytest.mark.parametrize(\n         \"refund_type\",\n        [\n            pytest.param(\"full\", marks=[pytest.mark.ebe47], id=\"update to same status\"),\n            pytest.param(\"partial\", marks=[pytest.mark.ebe48, pytest.mark.smoke], id=\"update to empty string\"),\n            pytest.param(\"refund_1_product\", marks=[pytest.mark.ebe49], id=\"update to random string\")\n        ]\n    )\n    \n    def test_order_refund(my_orders_smoke_setup, refund_type):\n        \"\"\"Test WooCommerce order refunds via API.\n    \n        Steps:\n        1. Create a new order with a product.\n        2. Apply refund based on `refund_type`:\n           - full: refund entire order\n           - partial: refund half the order\n           - refund_1_product: refund a single product\n        3. Verify that the refund amount returned by the API matches expected value.\n    \n        Args:\n            my_orders_smoke_setup (fixture): Fixture providing product, order, and helper setup.\n            refund_type (str): Type of refund to apply. One of \"full\", \"partial\", \"refund_1_product\".\n    \n        Assertions:\n            - Order creation API returns valid responses.\n            - Refund API returns the correct refund amount.\n        \"\"\"\n        # fetch product and customer\n        # create order\n        product_id = my_orders_smoke_setup[\"product_id\"]\n        product_price = my_orders_smoke_setup[\"product_price\"]\n        logger.info(f\"Product ID: {product_id}, Product price: {product_price}\")\n    \n        #create payload 'line_items' with custom product\n        create_payload = {\n            \"status\": \"processing\",\n            \"payment_method\": \"bacs\",\n            \"payment_method_title\": \"bacs\",\n            \"line_items\": [{\"product_id\": product_id}]\n        }\n        # make api call to create order\n        product_qty = 2 if refund_type == 'refund_1_product' else 1\n        create_order_responses = my_orders_smoke_setup[\"generic_orders_helper\"].create_order(additional_args=create_payload,\n                                                                                             product_qty=product_qty)\n        for create_order_response in create_order_responses:\n            assert create_order_response, f\"Create order API response is empty\"\n    \n            order_id = create_order_response['id']\n    \n            my_orders_smoke_setup[\"order_ids\"].append(order_id) # keeps track of newly created order_id for teardown\n    \n            # make UPDATE call with refund\n>           update_response = (my_orders_smoke_setup['generic_orders_helper'].create_order_refund(order_response=create_order_response,\n                                                                                                  refund_type=refund_type))\n\ntests/backend/orders/test_order_refunds.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/generic_helpers/generic_orders_helper.py:255: in create_order_refund\n    response = self.orders_api_helper.call_create_refund(\nsrc/api_helpers/OrdersAPIHelper.py:104: in call_create_refund\n    return self.woo_api_utility.post(f'orders/{order_id}/refunds/', params=payload)\nsrc/utilities/wooAPIUtility.py:64: in post\n    self.assert_status_code()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <demostore_automation.src.utilities.wooAPIUtility.WooAPIUtility object at 0x7f5a45499310>\n\n    def assert_status_code(self):\n        \"\"\"Asserts that the actual response status code matches the expected status code.\n    \n        Raises:\n            AssertionError: If actual status code does not equal expected status code.\n        \"\"\"\n>       assert self.status_code == self.expected_status_code, f\"Bad Status code.\" \\\n          f\"Expected {self.expected_status_code}, Actual status code: {self.status_code},\" \\\n          f\"URL: {self.url}, Response Json: {self.rs_json}\"\nE       AssertionError: Bad Status code.Expected 200, Actual status code: 500,URL: http://dev.bootcamp.store.supersqa.com/wp-json/wc/v3/orders/37587/refunds/?oauth_consumer_key=ck_cf778eee9bde12fa549ce0fc32de681d541860d1&oauth_timestamp=1758150246&oauth_nonce=e2fc1347e95dfbc86d08b3f580f11c308c55c216&oauth_signature_method=HMAC-SHA256&oauth_signature=UNxiwcOzBOYAyXV08SCrt1IZOwv1uHBn9xEvj4aG%2FUE%3D, Response Json: {'code': 'woocommerce_rest_cannot_create_order_refund', 'message': 'The payment gateway for this order does not support automatic refunds.', 'data': 500}\n\nsrc/utilities/wooAPIUtility.py:38: AssertionError","steps":[],"attachments":[{"uid":"160801541d656199","name":"log","source":"160801541d656199.txt","type":"text/plain","size":2868}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"my_orders_smoke_setup::0","time":{"start":1758150249073,"stop":1758150249834,"duration":761},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"order_status_edge"},{"name":"tag","value":"ebe47"},{"name":"tag","value":"orders"},{"name":"tag","value":"order_refund"},{"name":"parentSuite","value":"tests.backend.orders"},{"name":"suite","value":"test_order_refunds"},{"name":"host","value":"runnervmf4ws1"},{"name":"thread","value":"2086-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.backend.orders.test_order_refunds"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"refund_type","value":"'full'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["order_refund","ebe47","order_status_edge","orders"]},"source":"6f6b474a553027ac.json","parameterValues":["'full'"]}